valacware.cryptchat.AndroidLauncher -> valacware.cryptchat.AndroidLauncher:
    android.widget.EditText editText -> a
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
valacware.cryptchat.AndroidLauncher$1 -> valacware.cryptchat.a:
    valacware.cryptchat.CryptChat val$chat -> a
    valacware.cryptchat.AndroidLauncher this$0 -> b
    void <init>(valacware.cryptchat.AndroidLauncher,valacware.cryptchat.CryptChat) -> <init>
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
valacware.cryptchat.CCDateFormat -> valacware.cryptchat.b:
    void <init>() -> <init>
valacware.cryptchat.NativeMethods -> valacware.cryptchat.c:
    com.badlogic.gdx.backends.android.AndroidApplication link -> a
    void <init>(com.badlogic.gdx.backends.android.AndroidApplication) -> <init>
    java.io.File getFile(java.lang.String) -> a
valacware.cryptchat.CryptChat -> valacware.cryptchat.d:
    com.badlogic.gdx.graphics.Color CC_COLOR_0_SENDING -> e
    com.badlogic.gdx.graphics.Color CC_COLOR_1_SENT -> f
    com.badlogic.gdx.graphics.Color CC_COLOR_2_DELIVERED -> g
    com.badlogic.gdx.graphics.Color CC_COLOR_3_READ -> h
    com.badlogic.gdx.graphics.Color CC_COLOR_OTHER -> i
    com.badlogic.gdx.graphics.Color CC_COLOR_BUBBLE_OTHER -> j
    com.badlogic.gdx.graphics.Color CC_COLOR_BUBBLE_CLIENT -> k
    java.nio.ByteBuffer byteBuffer -> l
    java.nio.ByteBuffer bufferLong -> m
    java.nio.ByteBuffer bufferInt -> n
    java.nio.ByteBuffer bufferShort -> o
    byte[] byteLong -> p
    byte[] byteInt -> q
    byte[] byteShort -> r
    int salt -> s
    float height -> t
    float width -> u
    float halfHeight -> v
    float halfWidth -> w
    float pad -> x
    float halfPad -> y
    float doublePad -> z
    float radius -> A
    int backCounter -> B
    float minHeight -> C
    long lastSent -> a
    long lastDelivered -> b
    long lastRead -> c
    com.badlogic.gdx.graphics.g2d.BitmapFont fontText -> D
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> E
    valacware.cryptchat.Shapes shapes -> F
    com.badlogic.gdx.graphics.g2d.GlyphLayout glyph -> G
    java.lang.String chatText -> H
    valacware.cryptchat.network.StreamOut streamOut -> I
    java.util.TreeMap map -> d
    valacware.cryptchat.NativeInterface nativeInterface -> J
    valacware.cryptchat.CCDateFormat dateFormat -> K
    void <init>(valacware.cryptchat.NativeInterface) -> <init>
    void create() -> a
    void render() -> b
    void saveMessage(long,valacware.cryptchat.Message) -> a
    boolean connected() -> f
    float drawChatBox(long) -> b
    void drawBubbleText(float) -> a
    void resize(int,int) -> a
    void updateCam() -> g
    void updateSizes() -> h
    void sendMessage(java.lang.String) -> a
    void receiveMessage(int,long,byte[]) -> a
    void sendMsgStatus(long,int) -> b
    void sendPacket(valacware.cryptchat.network.Packet) -> a
    void updateID(long,long,int) -> a
    void updateStatus(long,int) -> a
    byte[] encryptMessage(java.lang.String) -> b
    java.lang.String decryptMessage(byte[],int) -> c
    void setGlyph(long,valacware.cryptchat.Message) -> b
    void manageInput() -> i
    boolean keyUp(int) -> a
    boolean keyDown(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
    boolean mouseMoved(int,int) -> b
    boolean scrolled(int) -> c
    byte[] longToBytes(long) -> a
    byte[] intToBytes(int) -> d
    byte[] shortToBytes(int) -> e
    byte[] shortToBytes(short) -> a
    long bytesToLong(byte[],int) -> a
    int bytesToInt(byte[],int) -> b
    void <clinit>() -> <clinit>
valacware.cryptchat.FileOutStream -> valacware.cryptchat.e:
    void <init>(java.io.File) -> <init>
    void writeLong(long) -> a
valacware.cryptchat.Message -> valacware.cryptchat.f:
    java.lang.String msg -> a
    boolean client -> b
    void <init>(java.lang.String,boolean) -> <init>
    boolean isClient() -> a
    java.lang.String getMsg() -> b
valacware.cryptchat.NativeInterface -> valacware.cryptchat.g:
    java.io.File getFile(java.lang.String) -> a
valacware.cryptchat.Shapes -> valacware.cryptchat.h:
    void <init>() -> <init>
    void roundedRect(float,float,float,float,float) -> a
valacware.cryptchat.network.Packet -> valacware.cryptchat.a.a:
    byte[] packet -> a
    char[] hexArray -> b
    void <init>(byte[]) -> <init>
    void <init>(byte[],int,long) -> <init>
    void <init>(long,int) -> <init>
    void action(valacware.cryptchat.CryptChat) -> a
    void action(valacware.cryptchat.CryptChat,valacware.cryptchat.network.ServerInterface,int,byte) -> a
    void createPacket(byte,byte[][]) -> a
    java.lang.String bytesToHex(byte[]) -> a
    void <clinit>() -> <clinit>
valacware.cryptchat.network.ServerInterface -> valacware.cryptchat.a.b:
    void sendStatus(int,int,long) -> a
    void sendMsg(int,int,long,long,byte[]) -> a
valacware.cryptchat.network.StreamIn -> valacware.cryptchat.a.c:
    java.util.ArrayList buffer -> a
    java.io.DataInputStream streamIn -> d
    java.lang.Object lock -> b
    boolean endLife -> c
    void <init>(java.net.Socket) -> <init>
    void killAll() -> a
    void run() -> run
    short bytesToShort(java.nio.ByteBuffer,byte[]) -> a
    void <clinit>() -> <clinit>
valacware.cryptchat.network.StreamOut -> valacware.cryptchat.a.d:
    java.util.ArrayList buffer -> a
    valacware.cryptchat.network.Packet ping -> d
    valacware.cryptchat.network.Packet toSend -> e
    java.io.DataOutputStream streamOut -> f
    valacware.cryptchat.network.StreamIn streamIn -> g
    java.lang.Object lock -> b
    boolean connected -> c
    java.net.Socket socket -> h
    void <init>() -> <init>
    void run() -> run
    void killAll() -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.Application -> com.badlogic.gdx.a:
    com.badlogic.gdx.ApplicationListener getApplicationListener() -> a
    com.badlogic.gdx.Graphics getGraphics() -> b
    void log(java.lang.String,java.lang.String) -> a
    void error(java.lang.String,java.lang.String) -> b
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void debug(java.lang.String,java.lang.String) -> c
    com.badlogic.gdx.Application$ApplicationType getType() -> c
    void postRunnable(java.lang.Runnable) -> a
com.badlogic.gdx.Application$ApplicationType -> com.badlogic.gdx.b:
    com.badlogic.gdx.Application$ApplicationType Android -> a
    com.badlogic.gdx.Application$ApplicationType Desktop -> b
    com.badlogic.gdx.Application$ApplicationType HeadlessDesktop -> c
    com.badlogic.gdx.Application$ApplicationType Applet -> d
    com.badlogic.gdx.Application$ApplicationType WebGL -> e
    com.badlogic.gdx.Application$ApplicationType iOS -> f
    com.badlogic.gdx.Application$ApplicationType[] $VALUES -> g
    com.badlogic.gdx.Application$ApplicationType[] values() -> values
    com.badlogic.gdx.Application$ApplicationType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.ApplicationAdapter -> com.badlogic.gdx.c:
    void <init>() -> <init>
    void create() -> a
    void resize(int,int) -> a
    void render() -> b
    void pause() -> c
    void resume() -> d
    void dispose() -> e
com.badlogic.gdx.ApplicationListener -> com.badlogic.gdx.d:
    void create() -> a
    void resize(int,int) -> a
    void render() -> b
    void pause() -> c
    void resume() -> d
    void dispose() -> e
com.badlogic.gdx.ApplicationLogger -> com.badlogic.gdx.e:
    void log(java.lang.String,java.lang.String) -> a
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void error(java.lang.String,java.lang.String) -> b
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> b
    void debug(java.lang.String,java.lang.String) -> c
com.badlogic.gdx.Audio -> com.badlogic.gdx.f:
com.badlogic.gdx.Files -> com.badlogic.gdx.g:
    com.badlogic.gdx.files.FileHandle getFileHandle(java.lang.String,com.badlogic.gdx.Files$FileType) -> a
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
    java.lang.String getExternalStoragePath() -> a
    java.lang.String getLocalStoragePath() -> b
com.badlogic.gdx.Files$FileType -> com.badlogic.gdx.h:
    com.badlogic.gdx.Files$FileType Classpath -> a
    com.badlogic.gdx.Files$FileType Internal -> b
    com.badlogic.gdx.Files$FileType External -> c
    com.badlogic.gdx.Files$FileType Absolute -> d
    com.badlogic.gdx.Files$FileType Local -> e
    com.badlogic.gdx.Files$FileType[] $VALUES -> f
    com.badlogic.gdx.Files$FileType[] values() -> values
    com.badlogic.gdx.Files$FileType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.Gdx -> com.badlogic.gdx.i:
    com.badlogic.gdx.Application app -> a
    com.badlogic.gdx.Graphics graphics -> b
    com.badlogic.gdx.Audio audio -> c
    com.badlogic.gdx.Input input -> d
    com.badlogic.gdx.Files files -> e
    com.badlogic.gdx.Net net -> f
    com.badlogic.gdx.graphics.GL20 gl -> g
    com.badlogic.gdx.graphics.GL20 gl20 -> h
    com.badlogic.gdx.graphics.GL30 gl30 -> i
com.badlogic.gdx.Graphics -> com.badlogic.gdx.j:
    int getWidth() -> a
    int getHeight() -> b
    float getDensity() -> c
    com.badlogic.gdx.Graphics$DisplayMode getDisplayMode() -> d
    boolean setWindowedMode(int,int) -> a
    boolean supportsExtension(java.lang.String) -> a
    void requestRendering() -> e
com.badlogic.gdx.Graphics$BufferFormat -> com.badlogic.gdx.k:
    int r -> a
    int g -> b
    int b -> c
    int a -> d
    int depth -> e
    int stencil -> f
    int samples -> g
    boolean coverageSampling -> h
    void <init>(int,int,int,int,int,int,int,boolean) -> <init>
    java.lang.String toString() -> toString
com.badlogic.gdx.Graphics$DisplayMode -> com.badlogic.gdx.l:
    int width -> a
    int height -> b
    int refreshRate -> c
    int bitsPerPixel -> d
    void <init>(int,int,int,int) -> <init>
    java.lang.String toString() -> toString
com.badlogic.gdx.Input -> com.badlogic.gdx.m:
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
com.badlogic.gdx.Input$Orientation -> com.badlogic.gdx.n:
    com.badlogic.gdx.Input$Orientation Landscape -> a
    com.badlogic.gdx.Input$Orientation Portrait -> b
    com.badlogic.gdx.Input$Orientation[] $VALUES -> c
    com.badlogic.gdx.Input$Orientation[] values() -> values
    com.badlogic.gdx.Input$Orientation valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.Input$TextInputListener -> com.badlogic.gdx.o:
com.badlogic.gdx.InputProcessor -> com.badlogic.gdx.p:
    boolean keyDown(int) -> b
    boolean keyUp(int) -> a
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
    boolean mouseMoved(int,int) -> b
    boolean scrolled(int) -> c
com.badlogic.gdx.LifecycleListener -> com.badlogic.gdx.q:
    void pause() -> a
    void resume() -> b
    void dispose() -> c
com.badlogic.gdx.Net -> com.badlogic.gdx.r:
com.badlogic.gdx.assets.AssetDescriptor -> com.badlogic.gdx.a.a:
    java.lang.String fileName -> a
    java.lang.Class type -> b
    com.badlogic.gdx.assets.AssetLoaderParameters params -> c
    com.badlogic.gdx.files.FileHandle file -> d
    void <init>(java.lang.String,java.lang.Class,com.badlogic.gdx.assets.AssetLoaderParameters) -> <init>
    java.lang.String toString() -> toString
com.badlogic.gdx.assets.AssetErrorListener -> com.badlogic.gdx.a.b:
    void error(com.badlogic.gdx.assets.AssetDescriptor,java.lang.Throwable) -> a
com.badlogic.gdx.assets.AssetLoaderParameters -> com.badlogic.gdx.a.c:
    com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback loadedCallback -> a
    void <init>() -> <init>
com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback -> com.badlogic.gdx.a.d:
    void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class) -> a
com.badlogic.gdx.assets.AssetLoadingTask -> com.badlogic.gdx.a.e:
    com.badlogic.gdx.assets.AssetManager manager -> a
    com.badlogic.gdx.assets.AssetDescriptor assetDesc -> b
    com.badlogic.gdx.assets.loaders.AssetLoader loader -> c
    com.badlogic.gdx.utils.async.AsyncExecutor executor -> d
    long startTime -> e
    boolean asyncDone -> f
    boolean dependenciesLoaded -> g
    com.badlogic.gdx.utils.Array dependencies -> h
    com.badlogic.gdx.utils.async.AsyncResult depsFuture -> i
    com.badlogic.gdx.utils.async.AsyncResult loadFuture -> j
    java.lang.Object asset -> k
    int ticks -> l
    boolean cancel -> m
    void <init>(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.assets.AssetDescriptor,com.badlogic.gdx.assets.loaders.AssetLoader,com.badlogic.gdx.utils.async.AsyncExecutor) -> <init>
    java.lang.Void call() -> a
    boolean update() -> b
    void handleSyncLoader() -> e
    void handleAsyncLoader() -> f
    com.badlogic.gdx.files.FileHandle resolve(com.badlogic.gdx.assets.loaders.AssetLoader,com.badlogic.gdx.assets.AssetDescriptor) -> a
    java.lang.Object getAsset() -> c
    void removeDuplicates(com.badlogic.gdx.utils.Array) -> a
    java.lang.Object call() -> d
com.badlogic.gdx.assets.AssetManager -> com.badlogic.gdx.a.f:
    com.badlogic.gdx.utils.ObjectMap assets -> a
    com.badlogic.gdx.utils.ObjectMap assetTypes -> b
    com.badlogic.gdx.utils.ObjectMap assetDependencies -> c
    com.badlogic.gdx.utils.ObjectSet injected -> d
    com.badlogic.gdx.utils.ObjectMap loaders -> e
    com.badlogic.gdx.utils.Array loadQueue -> f
    com.badlogic.gdx.utils.async.AsyncExecutor executor -> g
    java.util.Stack tasks -> h
    com.badlogic.gdx.assets.AssetErrorListener listener -> i
    int loaded -> j
    int toLoad -> k
    int peakTasks -> l
    com.badlogic.gdx.utils.Logger log -> m
    void unload(java.lang.String) -> a
    java.lang.String getAssetFileName(java.lang.Object) -> a
    boolean isLoaded(java.lang.String) -> b
    com.badlogic.gdx.assets.loaders.AssetLoader getLoader(java.lang.Class,java.lang.String) -> a
    void load(java.lang.String,java.lang.Class,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    boolean update() -> a
    void finishLoading() -> b
    void injectDependencies(java.lang.String,com.badlogic.gdx.utils.Array) -> a
    void injectDependency(java.lang.String,com.badlogic.gdx.assets.AssetDescriptor) -> a
    void nextTask() -> e
    void addTask(com.badlogic.gdx.assets.AssetDescriptor) -> a
    void addAsset(java.lang.String,java.lang.Class,java.lang.Object) -> a
    boolean updateTask() -> f
    void taskFailed(com.badlogic.gdx.assets.AssetDescriptor,java.lang.RuntimeException) -> a
    void incrementRefCountedDependencies(java.lang.String) -> d
    void handleTaskError(java.lang.Throwable) -> a
    void dispose() -> c
    void clear() -> d
    int getReferenceCount(java.lang.String) -> c
    void setReferenceCount(java.lang.String,int) -> a
com.badlogic.gdx.assets.RefCountedContainer -> com.badlogic.gdx.a.g:
    java.lang.Object object -> a
    int refCount -> b
    void <init>(java.lang.Object) -> <init>
    void incRefCount() -> a
    void decRefCount() -> b
    int getRefCount() -> c
    void setRefCount(int) -> a
    java.lang.Object getObject(java.lang.Class) -> a
com.badlogic.gdx.assets.loaders.AssetLoader -> com.badlogic.gdx.a.a.a:
    com.badlogic.gdx.assets.loaders.FileHandleResolver resolver -> a
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader -> com.badlogic.gdx.a.a.b:
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
com.badlogic.gdx.assets.loaders.CubemapLoader -> com.badlogic.gdx.a.a.c:
    com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapLoaderInfo info -> a
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter) -> a
    com.badlogic.gdx.graphics.Cubemap loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapLoaderInfo -> com.badlogic.gdx.a.a.d:
    java.lang.String filename -> a
    com.badlogic.gdx.graphics.CubemapData data -> b
    com.badlogic.gdx.graphics.Cubemap cubemap -> c
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter -> com.badlogic.gdx.a.a.e:
    com.badlogic.gdx.graphics.Pixmap$Format format -> b
    com.badlogic.gdx.graphics.Cubemap cubemap -> c
    com.badlogic.gdx.graphics.CubemapData cubemapData -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> f
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapU -> g
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapV -> h
    void <init>() -> <init>
com.badlogic.gdx.assets.loaders.FileHandleResolver -> com.badlogic.gdx.a.a.f:
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
com.badlogic.gdx.assets.loaders.SynchronousAssetLoader -> com.badlogic.gdx.a.a.g:
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureLoader -> com.badlogic.gdx.a.a.h:
    com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo info -> a
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter) -> a
    com.badlogic.gdx.graphics.Texture loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo -> com.badlogic.gdx.a.a.i:
    java.lang.String filename -> a
    com.badlogic.gdx.graphics.TextureData data -> b
    com.badlogic.gdx.graphics.Texture texture -> c
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter -> com.badlogic.gdx.a.a.j:
    com.badlogic.gdx.graphics.Pixmap$Format format -> b
    boolean genMipMaps -> c
    com.badlogic.gdx.graphics.Texture texture -> d
    com.badlogic.gdx.graphics.TextureData textureData -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> g
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapU -> h
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapV -> i
    void <init>() -> <init>
com.badlogic.gdx.audio.Music -> com.badlogic.gdx.b.a:
com.badlogic.gdx.audio.Music$OnCompletionListener -> com.badlogic.gdx.b.b:
    void onCompletion(com.badlogic.gdx.audio.Music) -> a
com.badlogic.gdx.backends.android.AndroidApplication -> com.badlogic.gdx.backends.android.a:
    com.badlogic.gdx.backends.android.AndroidGraphics graphics -> b
    com.badlogic.gdx.backends.android.AndroidInput input -> c
    com.badlogic.gdx.backends.android.AndroidAudio audio -> d
    com.badlogic.gdx.backends.android.AndroidFiles files -> e
    com.badlogic.gdx.backends.android.AndroidNet net -> f
    com.badlogic.gdx.backends.android.AndroidClipboard clipboard -> g
    com.badlogic.gdx.ApplicationListener listener -> h
    android.os.Handler handler -> i
    boolean firstResume -> j
    com.badlogic.gdx.utils.Array runnables -> k
    com.badlogic.gdx.utils.Array executedRunnables -> l
    com.badlogic.gdx.utils.SnapshotArray lifecycleListeners -> m
    com.badlogic.gdx.utils.Array androidEventListeners -> a
    int logLevel -> n
    com.badlogic.gdx.ApplicationLogger applicationLogger -> o
    boolean useImmersiveMode -> p
    boolean hideStatusBar -> q
    int wasFocusChanged -> r
    boolean isWaitingForAudio -> s
    void <init>() -> <init>
    android.view.View initializeForView(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
    void init(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,boolean) -> a
    android.widget.FrameLayout$LayoutParams createLayoutParams() -> d
    void createWakeLock(boolean) -> a
    void hideStatusBar(boolean) -> b
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void useImmersiveMode(boolean) -> c
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    com.badlogic.gdx.ApplicationListener getApplicationListener() -> a
    com.badlogic.gdx.Audio getAudio() -> e
    com.badlogic.gdx.Files getFiles() -> f
    com.badlogic.gdx.Graphics getGraphics() -> b
    com.badlogic.gdx.backends.android.AndroidInput getInput() -> g
    com.badlogic.gdx.Net getNet() -> h
    com.badlogic.gdx.Application$ApplicationType getType() -> c
    int getVersion() -> i
    void postRunnable(java.lang.Runnable) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void debug(java.lang.String,java.lang.String) -> c
    void log(java.lang.String,java.lang.String) -> a
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> b
    void error(java.lang.String,java.lang.String) -> b
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void setApplicationLogger(com.badlogic.gdx.ApplicationLogger) -> a
    com.badlogic.gdx.ApplicationLogger getApplicationLogger() -> j
    void addLifecycleListener(com.badlogic.gdx.LifecycleListener) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    android.content.Context getContext() -> k
    com.badlogic.gdx.utils.Array getRunnables() -> l
    com.badlogic.gdx.utils.Array getExecutedRunnables() -> m
    com.badlogic.gdx.utils.SnapshotArray getLifecycleListeners() -> n
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.AndroidApplication$1 -> com.badlogic.gdx.backends.android.b:
    com.badlogic.gdx.backends.android.AndroidApplication this$0 -> a
    void <init>(com.badlogic.gdx.backends.android.AndroidApplication) -> <init>
    void resume() -> b
    void pause() -> a
    void dispose() -> c
com.badlogic.gdx.backends.android.AndroidApplicationBase -> com.badlogic.gdx.backends.android.c:
    android.content.Context getContext() -> k
    com.badlogic.gdx.utils.Array getRunnables() -> l
    com.badlogic.gdx.utils.Array getExecutedRunnables() -> m
    com.badlogic.gdx.backends.android.AndroidInput getInput() -> g
    com.badlogic.gdx.utils.SnapshotArray getLifecycleListeners() -> n
    android.view.WindowManager getWindowManager() -> getWindowManager
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration -> com.badlogic.gdx.backends.android.d:
    int r -> a
    int g -> b
    int b -> c
    int a -> d
    int depth -> e
    int stencil -> f
    int numSamples -> g
    boolean useAccelerometer -> h
    boolean useGyroscope -> i
    boolean useCompass -> j
    int touchSleepTime -> k
    boolean useWakelock -> l
    boolean hideStatusBar -> m
    boolean disableAudio -> n
    int maxSimultaneousSounds -> o
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> p
    boolean getTouchEventsForLiveWallpaper -> q
    boolean useImmersiveMode -> r
    boolean useGL30 -> s
    boolean useGLSurfaceView20API18 -> t
    void <init>() -> <init>
com.badlogic.gdx.backends.android.AndroidApplicationLogger -> com.badlogic.gdx.backends.android.e:
    void <init>() -> <init>
    void log(java.lang.String,java.lang.String) -> a
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void error(java.lang.String,java.lang.String) -> b
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> b
    void debug(java.lang.String,java.lang.String) -> c
com.badlogic.gdx.backends.android.AndroidAudio -> com.badlogic.gdx.backends.android.f:
    android.media.SoundPool soundPool -> b
    android.media.AudioManager manager -> c
    java.util.List musics -> a
    void <init>(android.content.Context,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> <init>
    void pause() -> a
    void resume() -> b
    void dispose() -> c
com.badlogic.gdx.backends.android.AndroidClipboard -> com.badlogic.gdx.backends.android.g:
    android.text.ClipboardManager clipboard -> a
    android.content.ClipboardManager honeycombClipboard -> b
    void <init>(android.content.Context) -> <init>
com.badlogic.gdx.backends.android.AndroidEventListener -> com.badlogic.gdx.backends.android.h:
    void onActivityResult(int,int,android.content.Intent) -> a
com.badlogic.gdx.backends.android.AndroidFileHandle -> com.badlogic.gdx.backends.android.i:
    android.content.res.AssetManager assets -> c
    void <init>(android.content.res.AssetManager,java.lang.String,com.badlogic.gdx.Files$FileType) -> <init>
    void <init>(android.content.res.AssetManager,java.io.File,com.badlogic.gdx.Files$FileType) -> <init>
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle parent() -> a
    java.io.InputStream read() -> b
    boolean isDirectory() -> c
    boolean exists() -> d
    long length() -> e
    java.io.File file() -> f
com.badlogic.gdx.backends.android.AndroidFiles -> com.badlogic.gdx.backends.android.j:
    java.lang.String sdcard -> a
    java.lang.String localpath -> b
    android.content.res.AssetManager assets -> c
    com.badlogic.gdx.backends.android.ZipResourceFile expansionFile -> d
    void <init>(android.content.res.AssetManager,java.lang.String) -> <init>
    com.badlogic.gdx.files.FileHandle getFileHandle(java.lang.String,com.badlogic.gdx.Files$FileType) -> a
    com.badlogic.gdx.files.FileHandle getZipFileHandleIfExists(com.badlogic.gdx.files.FileHandle,java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
    java.lang.String getExternalStoragePath() -> a
    java.lang.String getLocalStoragePath() -> b
    com.badlogic.gdx.backends.android.ZipResourceFile getExpansionFile() -> c
com.badlogic.gdx.backends.android.AndroidGL20 -> com.badlogic.gdx.backends.android.AndroidGL20:
    void <init>() -> <init>
    void init() -> init
    void glAttachShader(int,int) -> glAttachShader
    void glBindBuffer(int,int) -> glBindBuffer
    void glBindFramebuffer(int,int) -> glBindFramebuffer
    void glBindRenderbuffer(int,int) -> glBindRenderbuffer
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    int glCheckFramebufferStatus(int) -> glCheckFramebufferStatus
    void glClear(int) -> glClear
    void glClearColor(float,float,float,float) -> glClearColor
    void glCompileShader(int) -> glCompileShader
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    int glCreateProgram() -> glCreateProgram
    int glCreateShader(int) -> glCreateShader
    void glDeleteBuffer(int) -> glDeleteBuffer
    void glDeleteFramebuffer(int) -> glDeleteFramebuffer
    void glDeleteProgram(int) -> glDeleteProgram
    void glDeleteRenderbuffer(int) -> glDeleteRenderbuffer
    void glDeleteShader(int) -> glDeleteShader
    void glDeleteTexture(int) -> glDeleteTexture
    void glDepthMask(boolean) -> glDepthMask
    void glDisable(int) -> glDisable
    void glDisableVertexAttribArray(int) -> glDisableVertexAttribArray
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glDrawElements(int,int,int,int) -> glDrawElements
    void glEnable(int) -> glEnable
    void glEnableVertexAttribArray(int) -> glEnableVertexAttribArray
    void glFramebufferRenderbuffer(int,int,int,int) -> glFramebufferRenderbuffer
    void glFramebufferTexture2D(int,int,int,int,int) -> glFramebufferTexture2D
    int glGenBuffer() -> glGenBuffer
    void glGenerateMipmap(int) -> glGenerateMipmap
    int glGenFramebuffer() -> glGenFramebuffer
    int glGenRenderbuffer() -> glGenRenderbuffer
    int glGenTexture() -> glGenTexture
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveAttrib
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveUniform
    int glGetAttribLocation(int,java.lang.String) -> glGetAttribLocation
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> glGetProgramiv
    java.lang.String glGetProgramInfoLog(int) -> glGetProgramInfoLog
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> glGetShaderiv
    java.lang.String glGetShaderInfoLog(int) -> glGetShaderInfoLog
    java.lang.String glGetString(int) -> glGetString
    int glGetUniformLocation(int,java.lang.String) -> glGetUniformLocation
    void glLinkProgram(int) -> glLinkProgram
    void glPixelStorei(int,int) -> glPixelStorei
    void glRenderbufferStorage(int,int,int,int) -> glRenderbufferStorage
    void glShaderSource(int,java.lang.String) -> glShaderSource
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage2D
    void glUniform1i(int,int) -> glUniform1i
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> glUniformMatrix4fv
    void glUseProgram(int) -> glUseProgram
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointer
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> glVertexAttribPointer
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.AndroidGL30 -> com.badlogic.gdx.backends.android.k:
    void <init>() -> <init>
    void glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glBindVertexArray(int) -> a
    void glDeleteVertexArrays(int,java.nio.IntBuffer) -> a
    void glGenVertexArrays(int,java.nio.IntBuffer) -> b
com.badlogic.gdx.backends.android.AndroidGraphics -> com.badlogic.gdx.backends.android.l:
    boolean enforceContinuousRendering -> a
    android.view.View view -> b
    int width -> c
    int height -> d
    com.badlogic.gdx.backends.android.AndroidApplicationBase app -> e
    com.badlogic.gdx.graphics.GL20 gl20 -> f
    com.badlogic.gdx.graphics.GL30 gl30 -> g
    javax.microedition.khronos.egl.EGLContext eglContext -> h
    com.badlogic.gdx.graphics.glutils.GLVersion glVersion -> i
    java.lang.String extensions -> j
    long lastFrameTime -> k
    float deltaTime -> l
    long frameStart -> m
    long frameId -> n
    int frames -> o
    int fps -> p
    com.badlogic.gdx.math.WindowedMean mean -> q
    boolean created -> r
    boolean running -> s
    boolean pause -> t
    boolean resume -> u
    boolean destroy -> v
    float ppiX -> z
    float ppiY -> A
    float ppcX -> B
    float ppcY -> C
    float density -> D
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> w
    com.badlogic.gdx.Graphics$BufferFormat bufferFormat -> E
    boolean isContinuous -> F
    int[] value -> x
    java.lang.Object synch -> y
    void <init>(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy) -> <init>
    void <init>(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy,boolean) -> <init>
    void preserveEGLContextOnPause() -> f
    android.view.View createGLSurfaceView(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy) -> a
    void onPauseGLSurfaceView() -> g
    void onResumeGLSurfaceView() -> h
    android.opengl.GLSurfaceView$EGLConfigChooser getEglConfigChooser() -> i
    void updatePpi() -> r
    boolean checkGL20() -> j
    int getHeight() -> b
    int getWidth() -> a
    void setupGL(javax.microedition.khronos.opengles.GL10) -> a
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    void logConfig(javax.microedition.khronos.egl.EGLConfig) -> a
    int getAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
    void resume() -> k
    void pause() -> l
    void destroy() -> m
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
    void clearManagedCaches() -> n
    void logManagedCachesStatus() -> o
    android.view.View getView() -> p
    float getDensity() -> c
    boolean setWindowedMode(int,int) -> a
    com.badlogic.gdx.Graphics$DisplayMode getDisplayMode() -> d
    boolean supportsExtension(java.lang.String) -> a
    void setContinuousRendering(boolean) -> a
    boolean isContinuousRendering() -> q
    void requestRendering() -> e
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode -> com.badlogic.gdx.backends.android.m:
    com.badlogic.gdx.backends.android.AndroidGraphics this$0 -> e
    void <init>(com.badlogic.gdx.backends.android.AndroidGraphics,int,int,int,int) -> <init>
com.badlogic.gdx.backends.android.AndroidInput -> com.badlogic.gdx.backends.android.n:
    com.badlogic.gdx.utils.Pool usedKeyEvents -> a
    com.badlogic.gdx.utils.Pool usedTouchEvents -> b
    java.util.ArrayList keyListeners -> c
    java.util.ArrayList keyEvents -> d
    java.util.ArrayList touchEvents -> e
    int[] touchX -> f
    int[] touchY -> g
    int[] deltaX -> h
    int[] deltaY -> i
    boolean[] touched -> j
    int[] button -> k
    int[] realId -> l
    boolean hasMultitouch -> m
    int keyCount -> w
    boolean[] keys -> x
    boolean keyJustPressed -> y
    boolean[] justPressedKeys -> z
    android.hardware.SensorManager manager -> A
    boolean accelerometerAvailable -> n
    float[] accelerometerValues -> B
    boolean gyroscopeAvailable -> o
    float[] gyroscopeValues -> C
    java.lang.String text -> D
    com.badlogic.gdx.Input$TextInputListener textListener -> E
    android.os.Handler handle -> F
    com.badlogic.gdx.Application app -> p
    android.content.Context context -> q
    com.badlogic.gdx.backends.android.AndroidTouchHandler touchHandler -> G
    int sleepTime -> H
    boolean catchBack -> I
    boolean catchMenu -> J
    android.os.Vibrator vibrator -> r
    boolean compassAvailable -> K
    boolean keyboardAvailable -> s
    float[] magneticFieldValues -> L
    float azimuth -> M
    float pitch -> N
    float roll -> O
    float inclination -> P
    boolean justTouched -> Q
    com.badlogic.gdx.InputProcessor processor -> R
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> S
    com.badlogic.gdx.Input$Orientation nativeOrientation -> T
    long currentEventTimeStamp -> U
    com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard onscreenKeyboard -> V
    android.hardware.SensorEventListener accelerometerListener -> W
    android.hardware.SensorEventListener gyroscopeListener -> X
    android.hardware.SensorEventListener compassListener -> Y
    boolean requestFocus -> t
    float[] R -> u
    float[] orientation -> v
    void <init>(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> <init>
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
    void processEvents() -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
    void registerSensorListeners() -> b
    void unregisterSensorListeners() -> c
    int getFreePointerIndex() -> d
    int[] resize(int[]) -> a
    boolean[] resize(boolean[]) -> a
    int lookUpPointerIndex(int) -> a
    int getRotation() -> e
    void onPause() -> f
    void onResume() -> g
com.badlogic.gdx.backends.android.AndroidInput$1 -> com.badlogic.gdx.backends.android.o:
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> a
    void <init>(com.badlogic.gdx.backends.android.AndroidInput,int,int) -> <init>
    com.badlogic.gdx.backends.android.AndroidInput$KeyEvent newObject() -> a
    java.lang.Object newObject() -> b
com.badlogic.gdx.backends.android.AndroidInput$2 -> com.badlogic.gdx.backends.android.p:
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> a
    void <init>(com.badlogic.gdx.backends.android.AndroidInput,int,int) -> <init>
    com.badlogic.gdx.backends.android.AndroidInput$TouchEvent newObject() -> a
    java.lang.Object newObject() -> b
com.badlogic.gdx.backends.android.AndroidInput$KeyEvent -> com.badlogic.gdx.backends.android.q:
    long timeStamp -> a
    int type -> b
    int keyCode -> c
    char keyChar -> d
    void <init>() -> <init>
com.badlogic.gdx.backends.android.AndroidInput$SensorListener -> com.badlogic.gdx.backends.android.r:
    float[] accelerometerValues -> a
    float[] magneticFieldValues -> b
    com.badlogic.gdx.Input$Orientation nativeOrientation -> c
    float[] gyroscopeValues -> d
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> e
    void <init>(com.badlogic.gdx.backends.android.AndroidInput,com.badlogic.gdx.Input$Orientation,float[],float[],float[]) -> <init>
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent -> com.badlogic.gdx.backends.android.s:
    long timeStamp -> a
    int type -> b
    int x -> c
    int y -> d
    int scrollAmount -> e
    int button -> f
    int pointer -> g
    void <init>() -> <init>
com.badlogic.gdx.backends.android.AndroidInputFactory -> com.badlogic.gdx.backends.android.t:
    com.badlogic.gdx.backends.android.AndroidInput newAndroidInput(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
com.badlogic.gdx.backends.android.AndroidInputThreePlus -> com.badlogic.gdx.backends.android.u:
    java.util.ArrayList genericMotionListeners -> w
    com.badlogic.gdx.backends.android.AndroidMouseHandler mouseHandler -> x
    void <init>(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> <init>
    boolean onGenericMotion(android.view.View,android.view.MotionEvent) -> onGenericMotion
com.badlogic.gdx.backends.android.AndroidMouseHandler -> com.badlogic.gdx.backends.android.v:
    int deltaX -> a
    int deltaY -> b
    void <init>() -> <init>
    boolean onGenericMotion(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput) -> a
    void postTouchEvent(com.badlogic.gdx.backends.android.AndroidInput,int,int,int,int,long) -> a
com.badlogic.gdx.backends.android.AndroidMultiTouchHandler -> com.badlogic.gdx.backends.android.w:
    void <init>() -> <init>
    void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput) -> a
    int toGdxButton(int) -> a
    void postTouchEvent(com.badlogic.gdx.backends.android.AndroidInput,int,int,int,int,int,long) -> a
    boolean supportsMultitouch(android.content.Context) -> a
com.badlogic.gdx.backends.android.AndroidMusic -> com.badlogic.gdx.backends.android.x:
    com.badlogic.gdx.backends.android.AndroidAudio audio -> c
    android.media.MediaPlayer player -> d
    boolean isPrepared -> e
    boolean wasPlaying -> a
    com.badlogic.gdx.audio.Music$OnCompletionListener onCompletionListener -> b
    void dispose() -> c
    boolean isPlaying() -> a
    void pause() -> b
    void play() -> d
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.badlogic.gdx.backends.android.AndroidMusic$1 -> com.badlogic.gdx.backends.android.y:
    com.badlogic.gdx.backends.android.AndroidMusic this$0 -> a
    void <init>(com.badlogic.gdx.backends.android.AndroidMusic) -> <init>
    void run() -> run
com.badlogic.gdx.backends.android.AndroidNet -> com.badlogic.gdx.backends.android.z:
    com.badlogic.gdx.backends.android.AndroidApplicationBase app -> a
    com.badlogic.gdx.net.NetJavaImpl netJavaImpl -> b
    void <init>(com.badlogic.gdx.backends.android.AndroidApplicationBase) -> <init>
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard -> com.badlogic.gdx.backends.android.aa:
    android.content.Context context -> a
    android.os.Handler handler -> b
    com.badlogic.gdx.backends.android.AndroidInput input -> c
    void <init>(android.content.Context,android.os.Handler,com.badlogic.gdx.backends.android.AndroidInput) -> <init>
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
com.badlogic.gdx.backends.android.AndroidTouchHandler -> com.badlogic.gdx.backends.android.ab:
    void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput) -> a
    boolean supportsMultitouch(android.content.Context) -> a
com.badlogic.gdx.backends.android.AndroidVisibilityListener -> com.badlogic.gdx.backends.android.ac:
    void <init>() -> <init>
com.badlogic.gdx.backends.android.AndroidZipFileHandle -> com.badlogic.gdx.backends.android.ad:
    android.content.res.AssetFileDescriptor assetFd -> c
    com.badlogic.gdx.backends.android.ZipResourceFile expansionFile -> d
    java.lang.String path -> e
    void <init>(java.lang.String) -> <init>
    void <init>(java.io.File,com.badlogic.gdx.Files$FileType) -> <init>
    void initialize() -> n
    java.lang.String getPath() -> o
    java.io.InputStream read() -> b
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle parent() -> a
    boolean isDirectory() -> c
    long length() -> e
    boolean exists() -> d
com.badlogic.gdx.backends.android.ZipResourceFile -> com.badlogic.gdx.backends.android.ae:
    java.util.HashMap mHashMap -> b
    java.util.HashMap mZipFiles -> a
    com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO[] getEntriesAt(java.lang.String) -> a
    android.content.res.AssetFileDescriptor getAssetFileDescriptor(java.lang.String) -> b
    java.io.InputStream getInputStream(java.lang.String) -> c
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO -> com.badlogic.gdx.backends.android.af:
    java.io.File mFile -> a
    java.lang.String mFileName -> b
    int mMethod -> c
    long mUncompressedLength -> d
    long mOffset -> e
    long getOffset() -> a
    boolean isUncompressed() -> b
    android.content.res.AssetFileDescriptor getAssetFileDescriptor() -> c
    java.io.File getZipFile() -> d
com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy -> com.badlogic.gdx.backends.android.a.a:
    void <init>() -> <init>
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 -> com.badlogic.gdx.backends.android.a.b:
    java.lang.String TAG -> a
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> b
    int targetGLESVersion -> c
    void <init>(android.content.Context,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy,int) -> <init>
    void onMeasure(int,int) -> onMeasure
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
    void init(boolean,int,int) -> a
    boolean checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10) -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1 -> com.badlogic.gdx.backends.android.a.c:
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 this$0 -> a
    void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20,android.view.View,boolean) -> <init>
    boolean deleteSurroundingText(int,int) -> deleteSurroundingText
    void sendDownUpKeyEventForBackwardCompatibility(int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser -> com.badlogic.gdx.backends.android.a.d:
    int EGL_OPENGL_ES2_BIT -> g
    int[] s_configAttribs2 -> h
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> d
    int mDepthSize -> e
    int mStencilSize -> f
    int[] mValue -> i
    void <init>(int,int,int,int,int,int) -> <init>
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory -> com.badlogic.gdx.backends.android.a.e:
    int EGL_CONTEXT_CLIENT_VERSION -> a
    void <init>() -> <init>
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> createContext
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> destroyContext
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18 -> com.badlogic.gdx.backends.android.a.f:
    java.lang.String TAG -> a
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> b
    void <init>(android.content.Context,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy) -> <init>
    void onMeasure(int,int) -> onMeasure
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
    void init(boolean,int,int) -> a
    void checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10) -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$1 -> com.badlogic.gdx.backends.android.a.g:
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18 this$0 -> a
    void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18,android.view.View,boolean) -> <init>
    boolean deleteSurroundingText(int,int) -> deleteSurroundingText
    void sendDownUpKeyEventForBackwardCompatibility(int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser -> com.badlogic.gdx.backends.android.a.h:
    int EGL_OPENGL_ES2_BIT -> g
    int[] s_configAttribs2 -> h
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> d
    int mDepthSize -> e
    int mStencilSize -> f
    int[] mValue -> i
    void <init>(int,int,int,int,int,int) -> <init>
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ContextFactory -> com.badlogic.gdx.backends.android.a.i:
    int EGL_CONTEXT_CLIENT_VERSION -> a
    void <init>() -> <init>
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> a
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 -> com.badlogic.gdx.backends.android.a.j:
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager sGLThreadManager -> a
    java.lang.ref.WeakReference mThisWeakRef -> b
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread mGLThread -> c
    android.opengl.GLSurfaceView$Renderer mRenderer -> d
    boolean mDetached -> e
    android.opengl.GLSurfaceView$EGLConfigChooser mEGLConfigChooser -> f
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory mEGLContextFactory -> g
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory mEGLWindowSurfaceFactory -> h
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper mGLWrapper -> i
    int mDebugFlags -> j
    int mEGLContextClientVersion -> k
    boolean mPreserveEGLContextOnPause -> l
    void <init>(android.content.Context) -> <init>
    void finalize() -> finalize
    void init() -> e
    void setGLWrapper(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper) -> setGLWrapper
    void setDebugFlags(int) -> setDebugFlags
    int getDebugFlags() -> getDebugFlags
    void setPreserveEGLContextOnPause(boolean) -> setPreserveEGLContextOnPause
    boolean getPreserveEGLContextOnPause() -> getPreserveEGLContextOnPause
    void setRenderer(android.opengl.GLSurfaceView$Renderer) -> setRenderer
    void setEGLContextFactory(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory) -> setEGLContextFactory
    void setEGLWindowSurfaceFactory(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory) -> setEGLWindowSurfaceFactory
    void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser) -> setEGLConfigChooser
    void setEGLConfigChooser(boolean) -> setEGLConfigChooser
    void setEGLConfigChooser(int,int,int,int,int,int) -> a
    void setEGLContextClientVersion(int) -> setEGLContextClientVersion
    void setRenderMode(int) -> setRenderMode
    int getRenderMode() -> getRenderMode
    void requestRender() -> a
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void onPause() -> b
    void onResume() -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void checkRenderThreadState() -> f
    int access$200(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> a
    android.opengl.GLSurfaceView$EGLConfigChooser access$300(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> b
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory access$400(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> c
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory access$500(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> d
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper access$600(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> e
    int access$700(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> f
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager access$800() -> d
    boolean access$900(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> g
    android.opengl.GLSurfaceView$Renderer access$1000(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> h
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$1 -> com.badlogic.gdx.backends.android.a.k:
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$BaseConfigChooser -> com.badlogic.gdx.backends.android.a.l:
    int[] mConfigSpec -> a
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0 -> b
    void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18,int[]) -> <init>
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int[] filterConfigSpec(int[]) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$ComponentSizeChooser -> com.badlogic.gdx.backends.android.a.m:
    int[] mValue -> j
    int mRedSize -> c
    int mGreenSize -> d
    int mBlueSize -> e
    int mAlphaSize -> f
    int mDepthSize -> g
    int mStencilSize -> h
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0 -> i
    void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18,int,int,int,int,int,int) -> <init>
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultContextFactory -> com.badlogic.gdx.backends.android.a.n:
    int EGL_CONTEXT_CLIENT_VERSION -> b
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0 -> a
    void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> <init>
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> a
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> a
    void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18,com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$1) -> <init>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultWindowSurfaceFactory -> com.badlogic.gdx.backends.android.a.o:
    void <init>() -> <init>
    javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object) -> a
    void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> a
    void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$1) -> <init>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory -> com.badlogic.gdx.backends.android.a.p:
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> a
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory -> com.badlogic.gdx.backends.android.a.q:
    javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object) -> a
    void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper -> com.badlogic.gdx.backends.android.a.r:
    java.lang.ref.WeakReference mGLSurfaceViewWeakRef -> f
    javax.microedition.khronos.egl.EGL10 mEgl -> a
    javax.microedition.khronos.egl.EGLDisplay mEglDisplay -> b
    javax.microedition.khronos.egl.EGLSurface mEglSurface -> c
    javax.microedition.khronos.egl.EGLConfig mEglConfig -> d
    javax.microedition.khronos.egl.EGLContext mEglContext -> e
    void <init>(java.lang.ref.WeakReference) -> <init>
    void start() -> a
    boolean createSurface() -> b
    javax.microedition.khronos.opengles.GL createGL() -> c
    int swap() -> d
    void destroySurface() -> e
    void destroySurfaceImp() -> g
    void finish() -> f
    void throwEglException(java.lang.String) -> a
    void throwEglException(java.lang.String,int) -> a
    void logEglErrorAsWarning(java.lang.String,java.lang.String,int) -> a
    java.lang.String getErrorString(int) -> a
    java.lang.String formatEglError(java.lang.String,int) -> b
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread -> com.badlogic.gdx.backends.android.a.s:
    boolean mShouldExit -> a
    boolean mExited -> b
    boolean mRequestPaused -> c
    boolean mPaused -> d
    boolean mHasSurface -> e
    boolean mSurfaceIsBad -> f
    boolean mWaitingForSurface -> g
    boolean mHaveEglContext -> h
    boolean mHaveEglSurface -> i
    boolean mFinishedCreatingEglSurface -> j
    boolean mShouldReleaseEglContext -> k
    int mWidth -> l
    int mHeight -> m
    int mRenderMode -> n
    boolean mRequestRender -> o
    boolean mRenderComplete -> p
    java.util.ArrayList mEventQueue -> q
    boolean mSizeChanged -> r
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper mEglHelper -> s
    java.lang.ref.WeakReference mGLSurfaceViewWeakRef -> t
    void <init>(java.lang.ref.WeakReference) -> <init>
    void run() -> run
    void stopEglSurfaceLocked() -> j
    void stopEglContextLocked() -> k
    void guardedRun() -> l
    boolean ableToDraw() -> a
    boolean readyToDraw() -> m
    void setRenderMode(int) -> a
    int getRenderMode() -> b
    void requestRender() -> c
    void surfaceCreated() -> d
    void surfaceDestroyed() -> e
    void onPause() -> f
    void onResume() -> g
    void onWindowResize(int,int) -> a
    void requestExitAndWait() -> h
    void requestReleaseEglContextLocked() -> i
    boolean access$1102(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread,boolean) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager -> com.badlogic.gdx.backends.android.a.t:
    java.lang.String TAG -> a
    boolean mGLESVersionCheckComplete -> b
    int mGLESVersion -> c
    boolean mGLESDriverCheckComplete -> d
    boolean mMultipleGLESContextsAllowed -> e
    boolean mLimitedGLESContexts -> f
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread mEglOwner -> g
    void <init>() -> <init>
    void threadExiting(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread) -> a
    boolean tryAcquireEglContextLocked(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread) -> b
    void releaseEglContextLocked(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread) -> c
    boolean shouldReleaseEGLContextWhenPausing() -> a
    boolean shouldTerminateEGLWhenPausing() -> b
    void checkGLDriver(javax.microedition.khronos.opengles.GL10) -> a
    void checkGLESVersion() -> c
    void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$1) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper -> com.badlogic.gdx.backends.android.a.u:
    javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$LogWriter -> com.badlogic.gdx.backends.android.a.v:
    java.lang.StringBuilder mBuilder -> a
    void <init>() -> <init>
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$SimpleEGLConfigChooser -> com.badlogic.gdx.backends.android.a.w:
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0 -> j
    void <init>(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18,boolean) -> <init>
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser -> com.badlogic.gdx.backends.android.a.x:
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> d
    int mDepthSize -> e
    int mStencilSize -> f
    int mNumSamples -> g
    int[] mConfigAttribs -> h
    int[] mValue -> i
    void <init>(int,int,int,int,int,int,int) -> <init>
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy -> com.badlogic.gdx.backends.android.a.y:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension -> com.badlogic.gdx.backends.android.a.z:
    int width -> a
    int height -> b
    void <init>(int,int) -> <init>
com.badlogic.gdx.files.FileHandle -> com.badlogic.gdx.c.a:
    java.io.File file -> a
    com.badlogic.gdx.Files$FileType type -> b
    void <init>() -> <init>
    void <init>(java.lang.String,com.badlogic.gdx.Files$FileType) -> <init>
    void <init>(java.io.File,com.badlogic.gdx.Files$FileType) -> <init>
    java.lang.String path() -> g
    java.lang.String name() -> h
    java.lang.String extension() -> i
    java.lang.String nameWithoutExtension() -> j
    java.lang.String pathWithoutExtension() -> k
    com.badlogic.gdx.Files$FileType type() -> l
    java.io.File file() -> f
    java.io.InputStream read() -> b
    byte[] readBytes() -> m
    int estimateLength() -> n
    boolean isDirectory() -> c
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle parent() -> a
    boolean exists() -> d
    long length() -> e
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.badlogic.gdx.files.FileHandle$1 -> com.badlogic.gdx.c.b:
    int[] $SwitchMap$com$badlogic$gdx$Files$FileType -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Camera -> com.badlogic.gdx.graphics.a:
    com.badlogic.gdx.math.Vector3 position -> a
    com.badlogic.gdx.math.Vector3 direction -> b
    com.badlogic.gdx.math.Vector3 up -> c
    com.badlogic.gdx.math.Matrix4 projection -> d
    com.badlogic.gdx.math.Matrix4 view -> e
    com.badlogic.gdx.math.Matrix4 combined -> f
    com.badlogic.gdx.math.Matrix4 invProjectionView -> g
    float near -> h
    float far -> i
    float viewportWidth -> j
    float viewportHeight -> k
    com.badlogic.gdx.math.Frustum frustum -> l
    com.badlogic.gdx.math.Vector3 tmpVec -> m
    com.badlogic.gdx.math.collision.Ray ray -> n
    void <init>() -> <init>
com.badlogic.gdx.graphics.Color -> com.badlogic.gdx.graphics.b:
    com.badlogic.gdx.graphics.Color CLEAR -> a
    com.badlogic.gdx.graphics.Color BLACK -> b
    com.badlogic.gdx.graphics.Color WHITE -> c
    com.badlogic.gdx.graphics.Color LIGHT_GRAY -> d
    com.badlogic.gdx.graphics.Color GRAY -> e
    com.badlogic.gdx.graphics.Color DARK_GRAY -> f
    com.badlogic.gdx.graphics.Color BLUE -> g
    com.badlogic.gdx.graphics.Color NAVY -> h
    com.badlogic.gdx.graphics.Color ROYAL -> i
    com.badlogic.gdx.graphics.Color SLATE -> j
    com.badlogic.gdx.graphics.Color SKY -> k
    com.badlogic.gdx.graphics.Color CYAN -> l
    com.badlogic.gdx.graphics.Color TEAL -> m
    com.badlogic.gdx.graphics.Color GREEN -> n
    com.badlogic.gdx.graphics.Color CHARTREUSE -> o
    com.badlogic.gdx.graphics.Color LIME -> p
    com.badlogic.gdx.graphics.Color FOREST -> q
    com.badlogic.gdx.graphics.Color OLIVE -> r
    com.badlogic.gdx.graphics.Color YELLOW -> s
    com.badlogic.gdx.graphics.Color GOLD -> t
    com.badlogic.gdx.graphics.Color GOLDENROD -> u
    com.badlogic.gdx.graphics.Color ORANGE -> v
    com.badlogic.gdx.graphics.Color BROWN -> w
    com.badlogic.gdx.graphics.Color TAN -> x
    com.badlogic.gdx.graphics.Color FIREBRICK -> y
    com.badlogic.gdx.graphics.Color RED -> z
    com.badlogic.gdx.graphics.Color SCARLET -> A
    com.badlogic.gdx.graphics.Color CORAL -> B
    com.badlogic.gdx.graphics.Color SALMON -> C
    com.badlogic.gdx.graphics.Color PINK -> D
    com.badlogic.gdx.graphics.Color MAGENTA -> E
    com.badlogic.gdx.graphics.Color PURPLE -> F
    com.badlogic.gdx.graphics.Color VIOLET -> G
    com.badlogic.gdx.graphics.Color MAROON -> H
    float r -> I
    float g -> J
    float b -> K
    float a -> L
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(float,float,float,float) -> <init>
    com.badlogic.gdx.graphics.Color set(com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.graphics.Color clamp() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    float toFloatBits() -> b
    int toIntBits() -> c
    java.lang.String toString() -> toString
    int rgba8888(float,float,float,float) -> a
    int rgba8888(com.badlogic.gdx.graphics.Color) -> b
    void rgba8888ToColor(com.badlogic.gdx.graphics.Color,int) -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Colors -> com.badlogic.gdx.graphics.c:
    com.badlogic.gdx.utils.ObjectMap map -> a
    com.badlogic.gdx.graphics.Color get(java.lang.String) -> a
    void reset() -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Cubemap -> com.badlogic.gdx.graphics.d:
    com.badlogic.gdx.assets.AssetManager assetManager -> i
    java.util.Map managedCubemaps -> a
    com.badlogic.gdx.graphics.CubemapData data -> b
    void <init>(com.badlogic.gdx.graphics.CubemapData) -> <init>
    void load(com.badlogic.gdx.graphics.CubemapData) -> a
    com.badlogic.gdx.graphics.CubemapData getCubemapData() -> a
    boolean isManaged() -> b
    void reload() -> d
    int getWidth() -> e
    int getHeight() -> f
    void dispose() -> c
    void clearAllCubemaps(com.badlogic.gdx.Application) -> a
    void invalidateAllCubemaps(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> g
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Cubemap$1 -> com.badlogic.gdx.graphics.e:
    int val$refCount -> a
    void <init>(int) -> <init>
    void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class) -> a
com.badlogic.gdx.graphics.CubemapData -> com.badlogic.gdx.graphics.f:
    boolean isPrepared() -> a
    void prepare() -> b
    void consumeCubemapData() -> c
    int getWidth() -> d
    int getHeight() -> e
    boolean isManaged() -> f
com.badlogic.gdx.graphics.GL20 -> com.badlogic.gdx.graphics.g:
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glClear(int) -> glClear
    void glClearColor(float,float,float,float) -> glClearColor
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glDeleteTexture(int) -> glDeleteTexture
    void glDepthMask(boolean) -> glDepthMask
    void glDisable(int) -> glDisable
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glEnable(int) -> glEnable
    int glGenTexture() -> glGenTexture
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    java.lang.String glGetString(int) -> glGetString
    void glPixelStorei(int,int) -> glPixelStorei
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage2D
    void glAttachShader(int,int) -> glAttachShader
    void glBindBuffer(int,int) -> glBindBuffer
    void glBindFramebuffer(int,int) -> glBindFramebuffer
    void glBindRenderbuffer(int,int) -> glBindRenderbuffer
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    int glCheckFramebufferStatus(int) -> glCheckFramebufferStatus
    void glCompileShader(int) -> glCompileShader
    int glCreateProgram() -> glCreateProgram
    int glCreateShader(int) -> glCreateShader
    void glDeleteBuffer(int) -> glDeleteBuffer
    void glDeleteFramebuffer(int) -> glDeleteFramebuffer
    void glDeleteProgram(int) -> glDeleteProgram
    void glDeleteRenderbuffer(int) -> glDeleteRenderbuffer
    void glDeleteShader(int) -> glDeleteShader
    void glDisableVertexAttribArray(int) -> glDisableVertexAttribArray
    void glDrawElements(int,int,int,int) -> glDrawElements
    void glEnableVertexAttribArray(int) -> glEnableVertexAttribArray
    void glFramebufferRenderbuffer(int,int,int,int) -> glFramebufferRenderbuffer
    void glFramebufferTexture2D(int,int,int,int,int) -> glFramebufferTexture2D
    int glGenBuffer() -> glGenBuffer
    void glGenerateMipmap(int) -> glGenerateMipmap
    int glGenFramebuffer() -> glGenFramebuffer
    int glGenRenderbuffer() -> glGenRenderbuffer
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveAttrib
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveUniform
    int glGetAttribLocation(int,java.lang.String) -> glGetAttribLocation
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> glGetProgramiv
    java.lang.String glGetProgramInfoLog(int) -> glGetProgramInfoLog
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> glGetShaderiv
    java.lang.String glGetShaderInfoLog(int) -> glGetShaderInfoLog
    int glGetUniformLocation(int,java.lang.String) -> glGetUniformLocation
    void glLinkProgram(int) -> glLinkProgram
    void glRenderbufferStorage(int,int,int,int) -> glRenderbufferStorage
    void glShaderSource(int,java.lang.String) -> glShaderSource
    void glUniform1i(int,int) -> glUniform1i
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> glUniformMatrix4fv
    void glUseProgram(int) -> glUseProgram
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointer
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> glVertexAttribPointer
com.badlogic.gdx.graphics.GL30 -> com.badlogic.gdx.graphics.h:
    void glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glBindVertexArray(int) -> a
    void glDeleteVertexArrays(int,java.nio.IntBuffer) -> a
    void glGenVertexArrays(int,java.nio.IntBuffer) -> b
com.badlogic.gdx.graphics.GLTexture -> com.badlogic.gdx.graphics.i:
    int glTarget -> c
    int glHandle -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> f
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> g
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> h
    int getWidth() -> e
    int getHeight() -> f
    void <init>(int) -> <init>
    void <init>(int,int) -> <init>
    void reload() -> d
    void bind() -> h
    com.badlogic.gdx.graphics.Texture$TextureFilter getMinFilter() -> i
    com.badlogic.gdx.graphics.Texture$TextureFilter getMagFilter() -> j
    com.badlogic.gdx.graphics.Texture$TextureWrap getUWrap() -> k
    com.badlogic.gdx.graphics.Texture$TextureWrap getVWrap() -> l
    int getTextureObjectHandle() -> m
    void unsafeSetWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap,boolean) -> a
    void setWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap) -> a
    void unsafeSetFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean) -> a
    void setFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter) -> a
    void delete() -> n
    void dispose() -> c
    void uploadImageData(int,com.badlogic.gdx.graphics.TextureData) -> a
    void uploadImageData(int,com.badlogic.gdx.graphics.TextureData,int) -> a
com.badlogic.gdx.graphics.Mesh -> com.badlogic.gdx.graphics.j:
    java.util.Map meshes -> a
    com.badlogic.gdx.graphics.glutils.VertexData vertices -> b
    com.badlogic.gdx.graphics.glutils.IndexData indices -> c
    boolean autoBind -> d
    boolean isVertexArray -> e
    com.badlogic.gdx.math.Vector3 tmpV -> f
    void <init>(boolean,int,int,com.badlogic.gdx.graphics.VertexAttribute[]) -> <init>
    com.badlogic.gdx.graphics.glutils.VertexData makeVertexBuffer(boolean,int,com.badlogic.gdx.graphics.VertexAttributes) -> a
    void <init>(com.badlogic.gdx.graphics.Mesh$VertexDataType,boolean,int,int,com.badlogic.gdx.graphics.VertexAttribute[]) -> <init>
    com.badlogic.gdx.graphics.Mesh setVertices(float[],int,int) -> a
    com.badlogic.gdx.graphics.Mesh setIndices(short[]) -> a
    int getNumIndices() -> a
    int getNumVertices() -> b
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> b
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int) -> a
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int) -> a
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int,boolean) -> a
    void dispose() -> c
    com.badlogic.gdx.graphics.VertexAttribute getVertexAttribute(int) -> a
    com.badlogic.gdx.graphics.VertexAttributes getVertexAttributes() -> d
    java.nio.ShortBuffer getIndicesBuffer() -> e
    void addManagedMesh(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Mesh) -> a
    void invalidateAllMeshes(com.badlogic.gdx.Application) -> a
    void clearAllMeshes(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> f
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Mesh$1 -> com.badlogic.gdx.graphics.k:
    int[] $SwitchMap$com$badlogic$gdx$graphics$Mesh$VertexDataType -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Mesh$VertexDataType -> com.badlogic.gdx.graphics.l:
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexArray -> a
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObject -> b
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectSubData -> c
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectWithVAO -> d
    com.badlogic.gdx.graphics.Mesh$VertexDataType[] $VALUES -> e
    com.badlogic.gdx.graphics.Mesh$VertexDataType[] values() -> values
    com.badlogic.gdx.graphics.Mesh$VertexDataType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.OrthographicCamera -> com.badlogic.gdx.graphics.m:
    float zoom -> m
    com.badlogic.gdx.math.Vector3 tmp -> n
    void <init>() -> <init>
    void <init>(float,float) -> <init>
    void update() -> a
    void update(boolean) -> a
com.badlogic.gdx.graphics.Pixmap -> com.badlogic.gdx.graphics.n:
    com.badlogic.gdx.graphics.Pixmap$Blending blending -> c
    com.badlogic.gdx.graphics.g2d.Gdx2DPixmap pixmap -> a
    int color -> b
    boolean disposed -> d
    void setBlending(com.badlogic.gdx.graphics.Pixmap$Blending) -> a
    void <init>(int,int,com.badlogic.gdx.graphics.Pixmap$Format) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle) -> <init>
    void setColor(float,float,float,float) -> a
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void fill() -> a
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int,int,int) -> a
    int getWidth() -> b
    int getHeight() -> d
    void dispose() -> c
    void drawPixel(int,int,int) -> a
    int getGLFormat() -> e
    int getGLInternalFormat() -> f
    int getGLType() -> g
    java.nio.ByteBuffer getPixels() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    com.badlogic.gdx.graphics.Pixmap$Blending getBlending() -> j
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Pixmap$Blending -> com.badlogic.gdx.graphics.o:
    com.badlogic.gdx.graphics.Pixmap$Blending None -> a
    com.badlogic.gdx.graphics.Pixmap$Blending SourceOver -> b
    com.badlogic.gdx.graphics.Pixmap$Blending[] $VALUES -> c
    com.badlogic.gdx.graphics.Pixmap$Blending[] values() -> values
    com.badlogic.gdx.graphics.Pixmap$Blending valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Pixmap$Format -> com.badlogic.gdx.graphics.p:
    com.badlogic.gdx.graphics.Pixmap$Format Alpha -> a
    com.badlogic.gdx.graphics.Pixmap$Format Intensity -> b
    com.badlogic.gdx.graphics.Pixmap$Format LuminanceAlpha -> c
    com.badlogic.gdx.graphics.Pixmap$Format RGB565 -> d
    com.badlogic.gdx.graphics.Pixmap$Format RGBA4444 -> e
    com.badlogic.gdx.graphics.Pixmap$Format RGB888 -> f
    com.badlogic.gdx.graphics.Pixmap$Format RGBA8888 -> g
    com.badlogic.gdx.graphics.Pixmap$Format[] $VALUES -> h
    com.badlogic.gdx.graphics.Pixmap$Format[] values() -> values
    com.badlogic.gdx.graphics.Pixmap$Format valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int toGdx2DPixmapFormat(com.badlogic.gdx.graphics.Pixmap$Format) -> a
    com.badlogic.gdx.graphics.Pixmap$Format fromGdx2DPixmapFormat(int) -> a
    int toGlFormat(com.badlogic.gdx.graphics.Pixmap$Format) -> b
    int toGlType(com.badlogic.gdx.graphics.Pixmap$Format) -> c
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.PixmapIO -> com.badlogic.gdx.graphics.q:
    com.badlogic.gdx.graphics.Pixmap readCIM(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.graphics.PixmapIO$CIM -> com.badlogic.gdx.graphics.r:
    byte[] writeBuffer -> a
    byte[] readBuffer -> b
    com.badlogic.gdx.graphics.Pixmap read(com.badlogic.gdx.files.FileHandle) -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Texture -> com.badlogic.gdx.graphics.s:
    com.badlogic.gdx.assets.AssetManager assetManager -> i
    java.util.Map managedTextures -> a
    com.badlogic.gdx.graphics.TextureData data -> b
    void <init>(com.badlogic.gdx.files.FileHandle,boolean) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap$Format,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.TextureData) -> <init>
    void <init>(int,int,com.badlogic.gdx.graphics.TextureData) -> <init>
    void load(com.badlogic.gdx.graphics.TextureData) -> a
    void reload() -> d
    int getWidth() -> e
    int getHeight() -> f
    com.badlogic.gdx.graphics.TextureData getTextureData() -> a
    boolean isManaged() -> b
    void dispose() -> c
    void addManagedTexture(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Texture) -> a
    void clearAllTextures(com.badlogic.gdx.Application) -> a
    void invalidateAllTextures(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> g
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Texture$1 -> com.badlogic.gdx.graphics.t:
    int val$refCount -> a
    void <init>(int) -> <init>
    void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class) -> a
com.badlogic.gdx.graphics.Texture$TextureFilter -> com.badlogic.gdx.graphics.u:
    com.badlogic.gdx.graphics.Texture$TextureFilter Nearest -> a
    com.badlogic.gdx.graphics.Texture$TextureFilter Linear -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMap -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestNearest -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearNearest -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestLinear -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearLinear -> g
    int glEnum -> h
    com.badlogic.gdx.graphics.Texture$TextureFilter[] $VALUES -> i
    com.badlogic.gdx.graphics.Texture$TextureFilter[] values() -> values
    com.badlogic.gdx.graphics.Texture$TextureFilter valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getGLEnum() -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.Texture$TextureWrap -> com.badlogic.gdx.graphics.v:
    com.badlogic.gdx.graphics.Texture$TextureWrap MirroredRepeat -> a
    com.badlogic.gdx.graphics.Texture$TextureWrap ClampToEdge -> b
    com.badlogic.gdx.graphics.Texture$TextureWrap Repeat -> c
    int glEnum -> d
    com.badlogic.gdx.graphics.Texture$TextureWrap[] $VALUES -> e
    com.badlogic.gdx.graphics.Texture$TextureWrap[] values() -> values
    com.badlogic.gdx.graphics.Texture$TextureWrap valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getGLEnum() -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.TextureArray -> com.badlogic.gdx.graphics.w:
    java.util.Map managedTextureArrays -> a
    com.badlogic.gdx.graphics.TextureArrayData data -> b
    void load(com.badlogic.gdx.graphics.TextureArrayData) -> a
    int getWidth() -> e
    int getHeight() -> f
    boolean isManaged() -> a
    void reload() -> d
    void clearAllTextureArrays(com.badlogic.gdx.Application) -> a
    void invalidateAllTextureArrays(com.badlogic.gdx.Application) -> b
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.TextureArrayData -> com.badlogic.gdx.graphics.x:
    boolean isPrepared() -> a
    void prepare() -> b
    void consumeTextureArrayData() -> c
    int getWidth() -> d
    int getHeight() -> e
    int getDepth() -> f
    boolean isManaged() -> g
    int getInternalFormat() -> h
    int getGLType() -> i
com.badlogic.gdx.graphics.TextureData -> com.badlogic.gdx.graphics.y:
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> g
    boolean isPrepared() -> a
    void prepare() -> b
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    boolean disposePixmap() -> i
    void consumeCustomData(int) -> a
    int getWidth() -> d
    int getHeight() -> e
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> j
    boolean useMipMaps() -> k
    boolean isManaged() -> f
com.badlogic.gdx.graphics.TextureData$Factory -> com.badlogic.gdx.graphics.z:
    com.badlogic.gdx.graphics.TextureData loadFromFile(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap$Format,boolean) -> a
com.badlogic.gdx.graphics.TextureData$TextureDataType -> com.badlogic.gdx.graphics.aa:
    com.badlogic.gdx.graphics.TextureData$TextureDataType Pixmap -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType Custom -> b
    com.badlogic.gdx.graphics.TextureData$TextureDataType[] $VALUES -> c
    com.badlogic.gdx.graphics.TextureData$TextureDataType[] values() -> values
    com.badlogic.gdx.graphics.TextureData$TextureDataType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.VertexAttribute -> com.badlogic.gdx.graphics.ab:
    int usage -> a
    int numComponents -> b
    boolean normalized -> c
    int type -> d
    int offset -> e
    java.lang.String alias -> f
    int unit -> g
    int usageIndex -> h
    void <init>(int,int,java.lang.String) -> <init>
    void <init>(int,int,java.lang.String,int) -> <init>
    void <init>(int,int,int,boolean,java.lang.String,int) -> <init>
    boolean equals(java.lang.Object) -> equals
    boolean equals(com.badlogic.gdx.graphics.VertexAttribute) -> a
    int getKey() -> a
    int hashCode() -> hashCode
com.badlogic.gdx.graphics.VertexAttributes -> com.badlogic.gdx.graphics.ac:
    com.badlogic.gdx.graphics.VertexAttribute[] attributes -> b
    int vertexSize -> a
    long mask -> c
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable iterable -> d
    void <init>(com.badlogic.gdx.graphics.VertexAttribute[]) -> <init>
    int calculateOffsets() -> c
    int size() -> a
    com.badlogic.gdx.graphics.VertexAttribute get(int) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    long getMask() -> b
    int compareTo(com.badlogic.gdx.graphics.VertexAttributes) -> a
    java.util.Iterator iterator() -> iterator
    int compareTo(java.lang.Object) -> compareTo
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable -> com.badlogic.gdx.graphics.ad:
    java.lang.Object[] array -> a
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator iterator1 -> b
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator iterator2 -> c
    void <init>(java.lang.Object[]) -> <init>
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator -> com.badlogic.gdx.graphics.ae:
    java.lang.Object[] array -> c
    int index -> a
    boolean valid -> b
    void <init>(java.lang.Object[]) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.graphics.g2d.Batch -> com.badlogic.gdx.graphics.g2d.a:
    void draw(com.badlogic.gdx.graphics.Texture,float[],int,int) -> a
com.badlogic.gdx.graphics.g2d.BitmapFont -> com.badlogic.gdx.graphics.g2d.b:
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData data -> a
    com.badlogic.gdx.utils.Array regions -> b
    com.badlogic.gdx.graphics.g2d.BitmapFontCache cache -> d
    boolean flipped -> e
    boolean integer -> c
    boolean ownsTexture -> f
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.TextureRegion,boolean) -> <init>
    void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.utils.Array,boolean) -> <init>
    void load(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float) -> a
    com.badlogic.gdx.utils.Array getRegions() -> a
    void dispose() -> c
    void setOwnsTexture(boolean) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFontCache newFontCache() -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData -> com.badlogic.gdx.graphics.g2d.c:
    java.lang.String[] imagePaths -> a
    com.badlogic.gdx.files.FileHandle fontFile -> b
    boolean flipped -> c
    float padTop -> d
    float padRight -> e
    float padBottom -> f
    float padLeft -> g
    float lineHeight -> h
    float capHeight -> i
    float ascent -> j
    float descent -> k
    float down -> l
    float blankLineScale -> m
    float scaleX -> n
    float scaleY -> o
    boolean markupEnabled -> p
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph[][] glyphs -> q
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph missingGlyph -> r
    float spaceWidth -> s
    float xHeight -> t
    char[] breakChars -> u
    char[] xChars -> v
    char[] capChars -> w
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle,boolean) -> <init>
    void load(com.badlogic.gdx.files.FileHandle,boolean) -> a
    void setGlyphRegion(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,com.badlogic.gdx.graphics.g2d.TextureRegion) -> a
    void setGlyph(int,com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getFirstGlyph() -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getGlyph(char) -> a
    void getGlyphs(com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,java.lang.CharSequence,int,int,boolean) -> a
    int getWrapIndex(com.badlogic.gdx.utils.Array,int) -> a
    boolean isBreakChar(char) -> b
    boolean isWhitespace(char) -> c
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph -> com.badlogic.gdx.graphics.g2d.d:
    int userID -> a
    int srcX -> b
    int srcY -> c
    int width -> d
    int height -> e
    float u -> f
    float v -> g
    float u2 -> h
    float v2 -> i
    int xoffset -> j
    int yoffset -> k
    int xadvance -> l
    byte[][] kerning -> m
    boolean fixedWidth -> n
    int page -> o
    void <init>() -> <init>
    int getKerning(char) -> a
    void setKerning(int,int) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.BitmapFontCache -> com.badlogic.gdx.graphics.g2d.e:
    com.badlogic.gdx.graphics.Color tempColor -> a
    float whiteTint -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> c
    boolean integer -> d
    com.badlogic.gdx.utils.Array layouts -> e
    com.badlogic.gdx.utils.Array pooledLayouts -> f
    int glyphCount -> g
    float x -> h
    float y -> i
    com.badlogic.gdx.graphics.Color color -> j
    float currentTint -> k
    float[][] pageVertices -> l
    int[] idx -> m
    com.badlogic.gdx.utils.IntArray[] pageGlyphIndices -> n
    int[] tempGlyphCount -> o
    void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,boolean) -> <init>
    void draw(com.badlogic.gdx.graphics.g2d.Batch) -> a
    void clear() -> a
    void requireGlyphs(com.badlogic.gdx.graphics.g2d.GlyphLayout) -> a
    void requirePageGlyphs(int,int) -> a
    void addToCache(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float) -> b
    void addGlyph(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,float,float,float) -> a
    void addText(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float) -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap -> com.badlogic.gdx.graphics.g2d.Gdx2DPixmap:
    long basePtr -> a
    int width -> b
    int height -> c
    int format -> d
    java.nio.ByteBuffer pixelPtr -> e
    long[] nativeData -> f
    int toGlFormat(int) -> a
    int toGlType(int) -> b
    void <init>(byte[],int,int,int) -> <init>
    void <init>(int,int,int) -> <init>
    void convert(int) -> d
    void dispose() -> c
    void clear(int) -> c
    void setPixel(int,int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int,int,int) -> a
    java.nio.ByteBuffer getPixels() -> a
    int getHeight() -> b
    int getWidth() -> d
    int getFormat() -> e
    int getGLInternalFormat() -> f
    int getGLFormat() -> g
    int getGLType() -> h
    java.nio.ByteBuffer load(long[],byte[],int,int) -> load
    java.nio.ByteBuffer newPixmap(long[],int,int,int) -> newPixmap
    void free(long) -> free
    void clear(long,int) -> clear
    void setPixel(long,int,int,int) -> setPixel
    void drawPixmap(long,long,int,int,int,int,int,int,int,int) -> drawPixmap
    void setBlend(int) -> setBlend
    void setScale(int) -> setScale
    java.lang.String getFailureReason() -> getFailureReason
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.GlyphLayout -> com.badlogic.gdx.graphics.g2d.f:
    com.badlogic.gdx.utils.Array runs -> a
    float width -> b
    float height -> c
    com.badlogic.gdx.utils.Array colorStack -> d
    void <init>() -> <init>
    void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,com.badlogic.gdx.graphics.Color,float,int,boolean) -> a
    void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.Color,float,int,boolean,java.lang.String) -> a
    void truncate(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,float,java.lang.String,int,com.badlogic.gdx.utils.Pool) -> a
    com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun wrap(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,com.badlogic.gdx.utils.Pool,int,int) -> a
    void adjustLastGlyph(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun) -> a
    int parseColorMarkup(java.lang.CharSequence,int,int,com.badlogic.gdx.utils.Pool) -> a
    void reset() -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun -> com.badlogic.gdx.graphics.g2d.g:
    com.badlogic.gdx.utils.Array glyphs -> a
    com.badlogic.gdx.utils.FloatArray xAdvances -> b
    float x -> c
    float y -> d
    float width -> e
    com.badlogic.gdx.graphics.Color color -> f
    void <init>() -> <init>
    void reset() -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.PixmapPacker -> com.badlogic.gdx.graphics.g2d.h:
    boolean packToTexture -> a
    boolean disposed -> b
    int pageWidth -> c
    int pageHeight -> d
    com.badlogic.gdx.graphics.Pixmap$Format pageFormat -> e
    int padding -> f
    boolean duplicateBorder -> g
    com.badlogic.gdx.graphics.Color transparentColor -> h
    com.badlogic.gdx.utils.Array pages -> i
    com.badlogic.gdx.graphics.g2d.PixmapPacker$PackStrategy packStrategy -> j
    void <init>(int,int,com.badlogic.gdx.graphics.Pixmap$Format,int,boolean,com.badlogic.gdx.graphics.g2d.PixmapPacker$PackStrategy) -> <init>
    com.badlogic.gdx.math.Rectangle pack(com.badlogic.gdx.graphics.Pixmap) -> a
    com.badlogic.gdx.math.Rectangle pack(java.lang.String,com.badlogic.gdx.graphics.Pixmap) -> a
    com.badlogic.gdx.utils.Array getPages() -> a
    com.badlogic.gdx.math.Rectangle getRect(java.lang.String) -> a
    void dispose() -> c
    void updateTextureRegions(com.badlogic.gdx.utils.Array,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean) -> a
    void updatePageTextures(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean) -> a
    void setPackToTexture(boolean) -> a
    com.badlogic.gdx.graphics.Color getTransparentColor() -> b
    void setTransparentColor(com.badlogic.gdx.graphics.Color) -> a
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy -> com.badlogic.gdx.graphics.g2d.i:
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g2d.PixmapPacker$Page pack(com.badlogic.gdx.graphics.g2d.PixmapPacker,java.lang.String,com.badlogic.gdx.math.Rectangle) -> a
    com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$Node insert(com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$Node,com.badlogic.gdx.math.Rectangle) -> a
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$GuillotinePage -> com.badlogic.gdx.graphics.g2d.j:
    com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$Node root -> a
    void <init>(com.badlogic.gdx.graphics.g2d.PixmapPacker) -> <init>
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$Node -> com.badlogic.gdx.graphics.g2d.k:
    com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$Node leftChild -> a
    com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$Node rightChild -> b
    com.badlogic.gdx.math.Rectangle rect -> c
    boolean full -> d
    void <init>() -> <init>
com.badlogic.gdx.graphics.g2d.PixmapPacker$PackStrategy -> com.badlogic.gdx.graphics.g2d.l:
    com.badlogic.gdx.graphics.g2d.PixmapPacker$Page pack(com.badlogic.gdx.graphics.g2d.PixmapPacker,java.lang.String,com.badlogic.gdx.math.Rectangle) -> a
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page -> com.badlogic.gdx.graphics.g2d.m:
    com.badlogic.gdx.utils.OrderedMap rects -> b
    com.badlogic.gdx.graphics.Pixmap image -> c
    com.badlogic.gdx.graphics.Texture texture -> d
    com.badlogic.gdx.utils.Array addedRects -> e
    boolean dirty -> f
    void <init>(com.badlogic.gdx.graphics.g2d.PixmapPacker) -> <init>
    boolean updateTexture(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean) -> a
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page$1 -> com.badlogic.gdx.graphics.g2d.n:
    com.badlogic.gdx.graphics.g2d.PixmapPacker$Page this$0 -> i
    void <init>(com.badlogic.gdx.graphics.g2d.PixmapPacker$Page,com.badlogic.gdx.graphics.TextureData) -> <init>
    void dispose() -> c
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy -> com.badlogic.gdx.graphics.g2d.o:
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g2d.PixmapPacker$Page pack(com.badlogic.gdx.graphics.g2d.PixmapPacker,java.lang.String,com.badlogic.gdx.math.Rectangle) -> a
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$SkylinePage -> com.badlogic.gdx.graphics.g2d.p:
    com.badlogic.gdx.utils.Array rows -> a
    void <init>(com.badlogic.gdx.graphics.g2d.PixmapPacker) -> <init>
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$SkylinePage$Row -> com.badlogic.gdx.graphics.g2d.q:
    int x -> a
    int y -> b
    int height -> c
    void <init>() -> <init>
com.badlogic.gdx.graphics.g2d.SpriteBatch -> com.badlogic.gdx.graphics.g2d.r:
    com.badlogic.gdx.graphics.Mesh$VertexDataType defaultVertexDataType -> a
    com.badlogic.gdx.graphics.Mesh mesh -> l
    float[] vertices -> b
    int idx -> c
    com.badlogic.gdx.graphics.Texture lastTexture -> d
    float invTexWidth -> e
    float invTexHeight -> f
    boolean drawing -> g
    com.badlogic.gdx.math.Matrix4 transformMatrix -> m
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> n
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> o
    boolean blendingDisabled -> p
    int blendSrcFunc -> q
    int blendDstFunc -> r
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> s
    com.badlogic.gdx.graphics.glutils.ShaderProgram customShader -> t
    boolean ownsShader -> u
    float color -> h
    com.badlogic.gdx.graphics.Color tempColor -> v
    int renderCalls -> i
    int totalRenderCalls -> j
    int maxSpritesInBatch -> k
    void <init>() -> <init>
    void <init>(int,com.badlogic.gdx.graphics.glutils.ShaderProgram) -> <init>
    com.badlogic.gdx.graphics.glutils.ShaderProgram createDefaultShader() -> a
    void begin() -> b
    void end() -> d
    void draw(com.badlogic.gdx.graphics.Texture,float[],int,int) -> a
    void flush() -> e
    void dispose() -> c
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void setupMatrices() -> g
    void switchTexture(com.badlogic.gdx.graphics.Texture) -> a
    boolean isBlendingEnabled() -> f
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.TextureAtlas -> com.badlogic.gdx.graphics.g2d.s:
    java.lang.String[] tuple -> a
    com.badlogic.gdx.utils.ObjectSet textures -> c
    java.util.Comparator indexComparator -> b
    void dispose() -> c
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.TextureAtlas$1 -> com.badlogic.gdx.graphics.g2d.t:
    void <init>() -> <init>
    int compare(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region,com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion -> com.badlogic.gdx.graphics.g2d.u:
    java.lang.String name -> a
    float offsetX -> b
    float offsetY -> c
    int packedHeight -> d
    int originalHeight -> e
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData -> com.badlogic.gdx.graphics.g2d.v:
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region -> com.badlogic.gdx.graphics.g2d.w:
    int index -> a
    void <init>() -> <init>
com.badlogic.gdx.graphics.g2d.TextureRegion -> com.badlogic.gdx.graphics.g2d.x:
    com.badlogic.gdx.graphics.Texture texture -> f
    float u -> g
    float v -> h
    float u2 -> i
    float v2 -> j
    int regionWidth -> k
    int regionHeight -> l
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.graphics.Texture) -> <init>
    void setRegion(int,int,int,int) -> a
    void setRegion(float,float,float,float) -> a
    com.badlogic.gdx.graphics.Texture getTexture() -> a
    int getRegionWidth() -> b
    int getRegionHeight() -> c
com.badlogic.gdx.graphics.g2d.freetype.FreeType -> com.badlogic.gdx.graphics.g2d.freetype.FreeType:
    int FT_PIXEL_MODE_NONE -> a
    int FT_PIXEL_MODE_MONO -> b
    int FT_PIXEL_MODE_GRAY -> c
    int FT_PIXEL_MODE_GRAY2 -> d
    int FT_PIXEL_MODE_GRAY4 -> e
    int FT_PIXEL_MODE_LCD -> f
    int FT_PIXEL_MODE_LCD_V -> g
    int FT_ENCODING_NONE -> h
    int FT_ENCODING_MS_SYMBOL -> i
    int FT_ENCODING_UNICODE -> j
    int FT_ENCODING_SJIS -> k
    int FT_ENCODING_GB2312 -> l
    int FT_ENCODING_BIG5 -> m
    int FT_ENCODING_WANSUNG -> n
    int FT_ENCODING_JOHAB -> o
    int FT_ENCODING_ADOBE_STANDARD -> p
    int FT_ENCODING_ADOBE_EXPERT -> q
    int FT_ENCODING_ADOBE_CUSTOM -> r
    int FT_ENCODING_ADOBE_LATIN_1 -> s
    int FT_ENCODING_OLD_LATIN_2 -> t
    int FT_ENCODING_APPLE_ROMAN -> u
    int FT_FACE_FLAG_SCALABLE -> v
    int FT_FACE_FLAG_FIXED_SIZES -> w
    int FT_FACE_FLAG_FIXED_WIDTH -> x
    int FT_FACE_FLAG_SFNT -> y
    int FT_FACE_FLAG_HORIZONTAL -> z
    int FT_FACE_FLAG_VERTICAL -> A
    int FT_FACE_FLAG_KERNING -> B
    int FT_FACE_FLAG_FAST_GLYPHS -> C
    int FT_FACE_FLAG_MULTIPLE_MASTERS -> D
    int FT_FACE_FLAG_GLYPH_NAMES -> E
    int FT_FACE_FLAG_EXTERNAL_STREAM -> F
    int FT_FACE_FLAG_HINTER -> G
    int FT_FACE_FLAG_CID_KEYED -> H
    int FT_FACE_FLAG_TRICKY -> I
    int FT_STYLE_FLAG_ITALIC -> J
    int FT_STYLE_FLAG_BOLD -> K
    int FT_LOAD_DEFAULT -> L
    int FT_LOAD_NO_SCALE -> M
    int FT_LOAD_NO_HINTING -> N
    int FT_LOAD_RENDER -> O
    int FT_LOAD_NO_BITMAP -> P
    int FT_LOAD_VERTICAL_LAYOUT -> Q
    int FT_LOAD_FORCE_AUTOHINT -> R
    int FT_LOAD_CROP_BITMAP -> S
    int FT_LOAD_PEDANTIC -> T
    int FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH -> U
    int FT_LOAD_NO_RECURSE -> V
    int FT_LOAD_IGNORE_TRANSFORM -> W
    int FT_LOAD_MONOCHROME -> X
    int FT_LOAD_LINEAR_DESIGN -> Y
    int FT_LOAD_NO_AUTOHINT -> Z
    int FT_LOAD_TARGET_NORMAL -> aa
    int FT_LOAD_TARGET_LIGHT -> ab
    int FT_LOAD_TARGET_MONO -> ac
    int FT_LOAD_TARGET_LCD -> ad
    int FT_LOAD_TARGET_LCD_V -> ae
    int FT_RENDER_MODE_NORMAL -> af
    int FT_RENDER_MODE_LIGHT -> ag
    int FT_RENDER_MODE_MONO -> ah
    int FT_RENDER_MODE_LCD -> ai
    int FT_RENDER_MODE_LCD_V -> aj
    int FT_RENDER_MODE_MAX -> ak
    int FT_KERNING_DEFAULT -> al
    int FT_KERNING_UNFITTED -> am
    int FT_KERNING_UNSCALED -> an
    int FT_STROKER_LINECAP_BUTT -> ao
    int FT_STROKER_LINECAP_ROUND -> ap
    int FT_STROKER_LINECAP_SQUARE -> aq
    int FT_STROKER_LINEJOIN_ROUND -> ar
    int FT_STROKER_LINEJOIN_BEVEL -> as
    int FT_STROKER_LINEJOIN_MITER_VARIABLE -> at
    int FT_STROKER_LINEJOIN_MITER -> au
    int FT_STROKER_LINEJOIN_MITER_FIXED -> av
    int getLastErrorCode() -> getLastErrorCode
    int encode(char,char,char,char) -> a
    com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library initFreeType() -> a
    long initFreeTypeJni() -> initFreeTypeJni
    int toInt(int) -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap -> com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap:
    void <init>(long) -> <init>
    int getRows() -> a
    int getRows(long) -> getRows
    int getWidth() -> b
    int getWidth(long) -> getWidth
    int getPitch() -> c
    int getPitch(long) -> getPitch
    java.nio.ByteBuffer getBuffer() -> d
    java.nio.ByteBuffer getBuffer(long) -> getBuffer
    com.badlogic.gdx.graphics.Pixmap getPixmap(com.badlogic.gdx.graphics.Pixmap$Format,com.badlogic.gdx.graphics.Color,float) -> a
    int getPixelMode() -> e
    int getPixelMode(long) -> getPixelMode
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face -> com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face:
    com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library library -> a
    void <init>(long,com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library) -> <init>
    void dispose() -> c
    void doneFace(long) -> doneFace
    int getFaceFlags() -> a
    int getFaceFlags(long) -> getFaceFlags
    int getNumGlyphs() -> b
    int getNumGlyphs(long) -> getNumGlyphs
    int getMaxAdvanceWidth() -> d
    int getMaxAdvanceWidth(long) -> getMaxAdvanceWidth
    boolean setPixelSizes(int,int) -> a
    boolean setPixelSizes(long,int,int) -> setPixelSizes
    boolean loadChar(int,int) -> b
    boolean loadChar(long,int,int) -> loadChar
    com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot getGlyph() -> e
    long getGlyph(long) -> getGlyph
    com.badlogic.gdx.graphics.g2d.freetype.FreeType$Size getSize() -> f
    long getSize(long) -> getSize
    boolean hasKerning() -> g
    boolean hasKerning(long) -> hasKerning
    int getKerning(int,int,int) -> a
    int getKerning(long,int,int,int) -> getKerning
    int getCharIndex(int) -> a
    int getCharIndex(long,int) -> getCharIndex
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph -> com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph:
    boolean rendered -> a
    void <init>(long) -> <init>
    void dispose() -> c
    void done(long) -> done
    void strokeBorder(com.badlogic.gdx.graphics.g2d.freetype.FreeType$Stroker,boolean) -> a
    long strokeBorder(long,long,boolean) -> strokeBorder
    void toBitmap(int) -> a
    long toBitmap(long,int) -> toBitmap
    com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap getBitmap() -> a
    long getBitmap(long) -> getBitmap
    int getLeft() -> b
    int getLeft(long) -> getLeft
    int getTop() -> d
    int getTop(long) -> getTop
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics -> com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics:
    void <init>(long) -> <init>
    int getHeight() -> a
    int getHeight(long) -> getHeight
    int getHoriAdvance() -> b
    int getHoriAdvance(long) -> getHoriAdvance
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot -> com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot:
    void <init>(long) -> <init>
    com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics getMetrics() -> a
    long getMetrics(long) -> getMetrics
    int getFormat() -> b
    int getFormat(long) -> getFormat
    com.badlogic.gdx.graphics.g2d.freetype.FreeType$Glyph getGlyph() -> c
    long getGlyph(long) -> getGlyph
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library -> com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library:
    com.badlogic.gdx.utils.LongMap fontData -> a
    void <init>(long) -> <init>
    void dispose() -> c
    void doneFreeType(long) -> doneFreeType
    com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face newMemoryFace(java.nio.ByteBuffer,int) -> a
    long newMemoryFace(long,java.nio.ByteBuffer,int,int) -> newMemoryFace
    com.badlogic.gdx.graphics.g2d.freetype.FreeType$Stroker createStroker() -> a
    long strokerNew(long) -> strokerNew
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Pointer -> com.badlogic.gdx.graphics.g2d.freetype.a:
    long address -> b
    void <init>(long) -> <init>
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Size -> com.badlogic.gdx.graphics.g2d.freetype.FreeType$Size:
    void <init>(long) -> <init>
    com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics getMetrics() -> a
    long getMetrics(long) -> getMetrics
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics -> com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics:
    void <init>(long) -> <init>
    int getAscender() -> a
    int getAscender(long) -> getAscender
    int getDescender() -> b
    int getDescender(long) -> getDescender
    int getHeight() -> c
    int getHeight(long) -> getHeight
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Stroker -> com.badlogic.gdx.graphics.g2d.freetype.FreeType$Stroker:
    void <init>(long) -> <init>
    void set(int,int,int,int) -> a
    void set(long,int,int,int,int) -> set
    void dispose() -> c
    void done(long) -> done
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator -> com.badlogic.gdx.graphics.g2d.freetype.b:
    int maxTextureSize -> e
    com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library library -> a
    com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face face -> b
    java.lang.String name -> c
    boolean bitmapped -> d
    int pixelWidth -> f
    int pixelHeight -> g
    void <init>(com.badlogic.gdx.files.FileHandle) -> <init>
    int getLoadingFlags(com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter) -> b
    boolean loadChar(int) -> a
    boolean loadChar(int,int) -> b
    boolean checkForBitmapFont() -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont generateFont(com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont generateFont(com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter,com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData) -> a
    void setPixelSizes(int,int) -> a
    com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData generateData(com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter,com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData) -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph createGlyph(char,com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData,com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter,com.badlogic.gdx.graphics.g2d.freetype.FreeType$Stroker,float,com.badlogic.gdx.graphics.g2d.PixmapPacker) -> a
    void dispose() -> c
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$1 -> com.badlogic.gdx.graphics.g2d.freetype.c:
    int[] $SwitchMap$com$badlogic$gdx$graphics$g2d$freetype$FreeTypeFontGenerator$Hinting -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData -> com.badlogic.gdx.graphics.g2d.freetype.d:
    com.badlogic.gdx.utils.Array regions -> x
    com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator generator -> y
    com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter parameter -> z
    com.badlogic.gdx.graphics.g2d.freetype.FreeType$Stroker stroker -> A
    com.badlogic.gdx.graphics.g2d.PixmapPacker packer -> B
    com.badlogic.gdx.utils.Array glyphs -> C
    boolean dirty -> D
    void <init>() -> <init>
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getGlyph(char) -> a
    void getGlyphs(com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,java.lang.CharSequence,int,int,boolean) -> a
    void dispose() -> c
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter -> com.badlogic.gdx.graphics.g2d.freetype.e:
    int size -> a
    boolean mono -> b
    com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting hinting -> c
    com.badlogic.gdx.graphics.Color color -> d
    float gamma -> e
    int renderCount -> f
    float borderWidth -> g
    com.badlogic.gdx.graphics.Color borderColor -> h
    boolean borderStraight -> i
    float borderGamma -> j
    int shadowOffsetX -> k
    int shadowOffsetY -> l
    com.badlogic.gdx.graphics.Color shadowColor -> m
    int spaceX -> n
    int spaceY -> o
    java.lang.String characters -> p
    boolean kerning -> q
    com.badlogic.gdx.graphics.g2d.PixmapPacker packer -> r
    boolean flip -> s
    boolean genMipMaps -> t
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> u
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> v
    boolean incremental -> w
    void <init>() -> <init>
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting -> com.badlogic.gdx.graphics.g2d.freetype.f:
    com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting None -> a
    com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting Slight -> b
    com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting Medium -> c
    com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting Full -> d
    com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting AutoSlight -> e
    com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting AutoMedium -> f
    com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting AutoFull -> g
    com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting[] $VALUES -> h
    com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting[] values() -> values
    com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.glutils.ETC1 -> com.badlogic.gdx.graphics.glutils.ETC1:
    int PKM_HEADER_SIZE -> a
    int ETC1_RGB8_OES -> b
    int getPixelSize(com.badlogic.gdx.graphics.Pixmap$Format) -> a
    com.badlogic.gdx.graphics.Pixmap decodeImage(com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data,com.badlogic.gdx.graphics.Pixmap$Format) -> a
    int getWidthPKM(java.nio.ByteBuffer,int) -> getWidthPKM
    int getHeightPKM(java.nio.ByteBuffer,int) -> getHeightPKM
    boolean isValidPKM(java.nio.ByteBuffer,int) -> isValidPKM
    void decodeImage(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int) -> decodeImage
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data -> com.badlogic.gdx.graphics.glutils.a:
    int width -> a
    int height -> b
    java.nio.ByteBuffer compressedData -> c
    int dataOffset -> d
    void <init>(int,int,java.nio.ByteBuffer,int) -> <init>
    void <init>(com.badlogic.gdx.files.FileHandle) -> <init>
    void checkNPOT() -> b
    boolean hasPKMHeader() -> a
    void dispose() -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.glutils.ETC1TextureData -> com.badlogic.gdx.graphics.glutils.b:
    com.badlogic.gdx.files.FileHandle file -> a
    com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data data -> b
    boolean useMipMaps -> c
    int width -> d
    int height -> e
    boolean isPrepared -> f
    void <init>(com.badlogic.gdx.files.FileHandle,boolean) -> <init>
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> g
    boolean isPrepared() -> a
    void prepare() -> b
    void consumeCustomData(int) -> a
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    boolean disposePixmap() -> i
    int getWidth() -> d
    int getHeight() -> e
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> j
    boolean useMipMaps() -> k
    boolean isManaged() -> f
com.badlogic.gdx.graphics.glutils.FileTextureData -> com.badlogic.gdx.graphics.glutils.c:
    boolean copyToPOT -> a
    com.badlogic.gdx.files.FileHandle file -> b
    int width -> c
    int height -> d
    com.badlogic.gdx.graphics.Pixmap$Format format -> e
    com.badlogic.gdx.graphics.Pixmap pixmap -> f
    boolean useMipMaps -> g
    boolean isPrepared -> h
    void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap$Format,boolean) -> <init>
    boolean isPrepared() -> a
    void prepare() -> b
    com.badlogic.gdx.graphics.Pixmap ensurePot(com.badlogic.gdx.graphics.Pixmap) -> a
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    boolean disposePixmap() -> i
    int getWidth() -> d
    int getHeight() -> e
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> j
    boolean useMipMaps() -> k
    boolean isManaged() -> f
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> g
    void consumeCustomData(int) -> a
com.badlogic.gdx.graphics.glutils.FrameBuffer -> com.badlogic.gdx.graphics.glutils.d:
    com.badlogic.gdx.graphics.Texture createColorTexture() -> a
    void disposeColorTexture(com.badlogic.gdx.graphics.Texture) -> a
    void attachFrameBufferColorTexture() -> b
    void disposeColorTexture(com.badlogic.gdx.graphics.GLTexture) -> a
    com.badlogic.gdx.graphics.GLTexture createColorTexture() -> d
com.badlogic.gdx.graphics.glutils.GLFrameBuffer -> com.badlogic.gdx.graphics.glutils.e:
    java.util.Map buffers -> g
    com.badlogic.gdx.graphics.GLTexture colorTexture -> a
    int defaultFramebufferHandle -> h
    boolean defaultFramebufferHandleInitialized -> i
    int framebufferHandle -> j
    int depthbufferHandle -> k
    int stencilbufferHandle -> l
    int depthStencilPackedBufferHandle -> m
    int width -> b
    int height -> c
    boolean hasDepth -> d
    boolean hasStencil -> e
    boolean hasDepthStencilPackedBuffer -> n
    com.badlogic.gdx.graphics.Pixmap$Format format -> f
    com.badlogic.gdx.graphics.GLTexture createColorTexture() -> d
    void disposeColorTexture(com.badlogic.gdx.graphics.GLTexture) -> a
    void attachFrameBufferColorTexture() -> b
    void build() -> a
    void dispose() -> c
    void invalidateAllFrameBuffers(com.badlogic.gdx.Application) -> a
    void clearAllFrameBuffers(com.badlogic.gdx.Application) -> b
    java.lang.StringBuilder getManagedStatus(java.lang.StringBuilder) -> a
    java.lang.String getManagedStatus() -> e
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData -> com.badlogic.gdx.graphics.glutils.f:
    int width -> a
    int height -> b
    boolean isPrepared -> c
    int mipLevel -> d
    int internalFormat -> e
    int format -> f
    int type -> g
    void <init>(int,int,int,int,int,int) -> <init>
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> g
    boolean isPrepared() -> a
    void prepare() -> b
    void consumeCustomData(int) -> a
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    boolean disposePixmap() -> i
    int getWidth() -> d
    int getHeight() -> e
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> j
    boolean useMipMaps() -> k
    boolean isManaged() -> f
com.badlogic.gdx.graphics.glutils.GLVersion -> com.badlogic.gdx.graphics.glutils.g:
    int majorVersion -> a
    int minorVersion -> b
    int releaseVersion -> c
    java.lang.String vendorString -> d
    java.lang.String rendererString -> e
    com.badlogic.gdx.graphics.glutils.GLVersion$Type type -> f
    java.lang.String TAG -> g
    void <init>(com.badlogic.gdx.Application$ApplicationType,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void extractVersion(java.lang.String,java.lang.String) -> a
    int parseInt(java.lang.String,int) -> a
    int getMajorVersion() -> a
com.badlogic.gdx.graphics.glutils.GLVersion$Type -> com.badlogic.gdx.graphics.glutils.h:
    com.badlogic.gdx.graphics.glutils.GLVersion$Type OpenGL -> a
    com.badlogic.gdx.graphics.glutils.GLVersion$Type GLES -> b
    com.badlogic.gdx.graphics.glutils.GLVersion$Type WebGL -> c
    com.badlogic.gdx.graphics.glutils.GLVersion$Type NONE -> d
    com.badlogic.gdx.graphics.glutils.GLVersion$Type[] $VALUES -> e
    com.badlogic.gdx.graphics.glutils.GLVersion$Type[] values() -> values
    com.badlogic.gdx.graphics.glutils.GLVersion$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer -> com.badlogic.gdx.graphics.glutils.i:
    void begin(com.badlogic.gdx.math.Matrix4,int) -> a
    void color(float) -> a
    void vertex(float,float,float) -> a
    void end() -> a
    int getNumVertices() -> b
    int getMaxVertices() -> c
    void dispose() -> d
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20 -> com.badlogic.gdx.graphics.glutils.j:
    int primitiveType -> a
    int vertexIdx -> b
    int numSetTexCoords -> c
    int maxVertices -> d
    int numVertices -> e
    com.badlogic.gdx.graphics.Mesh mesh -> f
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> g
    boolean ownsShader -> h
    int numTexCoords -> i
    int vertexSize -> j
    int normalOffset -> k
    int colorOffset -> l
    int texCoordOffset -> m
    com.badlogic.gdx.math.Matrix4 projModelView -> n
    float[] vertices -> o
    java.lang.String[] shaderUniformNames -> p
    void <init>(int,boolean,boolean,int) -> <init>
    void <init>(int,boolean,boolean,int,com.badlogic.gdx.graphics.glutils.ShaderProgram) -> <init>
    com.badlogic.gdx.graphics.VertexAttribute[] buildVertexAttributes(boolean,boolean,int) -> b
    void begin(com.badlogic.gdx.math.Matrix4,int) -> a
    void color(float) -> a
    void vertex(float,float,float) -> a
    void flush() -> e
    void end() -> a
    int getNumVertices() -> b
    int getMaxVertices() -> c
    void dispose() -> d
    java.lang.String createVertexShader(boolean,boolean,int) -> c
    java.lang.String createFragmentShader(boolean,boolean,int) -> d
    com.badlogic.gdx.graphics.glutils.ShaderProgram createDefaultShader(boolean,boolean,int) -> a
com.badlogic.gdx.graphics.glutils.IndexArray -> com.badlogic.gdx.graphics.glutils.k:
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    boolean empty -> c
    void <init>(int) -> <init>
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> d
    void bind() -> e
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.IndexBufferObject -> com.badlogic.gdx.graphics.glutils.l:
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    int bufferHandle -> c
    boolean isDirect -> d
    boolean isDirty -> e
    boolean isBound -> f
    int usage -> g
    boolean empty -> h
    void <init>(boolean,int) -> <init>
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> d
    void bind() -> e
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData -> com.badlogic.gdx.graphics.glutils.m:
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    int bufferHandle -> c
    boolean isDirect -> d
    boolean isDirty -> e
    boolean isBound -> f
    int usage -> g
    void <init>(boolean,int) -> <init>
    int createBufferObject() -> h
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> d
    void bind() -> e
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.IndexData -> com.badlogic.gdx.graphics.glutils.n:
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> d
    void bind() -> e
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.KTXTextureData -> com.badlogic.gdx.graphics.glutils.o:
    com.badlogic.gdx.files.FileHandle file -> a
    int glType -> b
    int glTypeSize -> c
    int glFormat -> d
    int glInternalFormat -> e
    int glBaseInternalFormat -> f
    int pixelWidth -> g
    int pixelHeight -> h
    int pixelDepth -> i
    int numberOfArrayElements -> j
    int numberOfFaces -> k
    int numberOfMipmapLevels -> l
    int imagePos -> m
    java.nio.ByteBuffer compressedData -> n
    boolean useMipMaps -> o
    void <init>(com.badlogic.gdx.files.FileHandle,boolean) -> <init>
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> g
    boolean isPrepared() -> a
    void prepare() -> b
    void consumeCubemapData() -> c
    void consumeCustomData(int) -> a
    void disposePreparedData() -> l
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    boolean disposePixmap() -> i
    int getWidth() -> d
    int getHeight() -> e
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> j
    boolean useMipMaps() -> k
    boolean isManaged() -> f
com.badlogic.gdx.graphics.glutils.MipMapGenerator -> com.badlogic.gdx.graphics.glutils.p:
    boolean useHWMipMap -> a
    void generateMipMap(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> a
    void generateMipMapGLES20(int,com.badlogic.gdx.graphics.Pixmap) -> a
    void generateMipMapDesktop(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> b
    void generateMipMapCPU(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> c
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.glutils.PixmapTextureData -> com.badlogic.gdx.graphics.glutils.q:
    com.badlogic.gdx.graphics.Pixmap pixmap -> a
    com.badlogic.gdx.graphics.Pixmap$Format format -> b
    boolean useMipMaps -> c
    boolean disposePixmap -> d
    boolean managed -> e
    void <init>(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap$Format,boolean,boolean,boolean) -> <init>
    boolean disposePixmap() -> i
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    int getWidth() -> d
    int getHeight() -> e
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> j
    boolean useMipMaps() -> k
    boolean isManaged() -> f
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> g
    void consumeCustomData(int) -> a
    boolean isPrepared() -> a
    void prepare() -> b
com.badlogic.gdx.graphics.glutils.ShaderProgram -> com.badlogic.gdx.graphics.glutils.r:
    boolean pedantic -> a
    java.lang.String prependVertexCode -> b
    java.lang.String prependFragmentCode -> c
    com.badlogic.gdx.utils.ObjectMap shaders -> g
    java.lang.String log -> h
    boolean isCompiled -> i
    com.badlogic.gdx.utils.ObjectIntMap uniforms -> j
    com.badlogic.gdx.utils.ObjectIntMap uniformTypes -> k
    com.badlogic.gdx.utils.ObjectIntMap uniformSizes -> l
    java.lang.String[] uniformNames -> m
    com.badlogic.gdx.utils.ObjectIntMap attributes -> n
    com.badlogic.gdx.utils.ObjectIntMap attributeTypes -> o
    com.badlogic.gdx.utils.ObjectIntMap attributeSizes -> p
    java.lang.String[] attributeNames -> q
    int program -> r
    int vertexShaderHandle -> s
    int fragmentShaderHandle -> t
    java.nio.FloatBuffer matrix -> u
    java.lang.String vertexShaderSource -> v
    java.lang.String fragmentShaderSource -> w
    boolean invalidated -> x
    int refCount -> y
    java.nio.IntBuffer intbuf -> d
    java.nio.IntBuffer params -> e
    java.nio.IntBuffer type -> f
    void <init>(java.lang.String,java.lang.String) -> <init>
    void compileShaders(java.lang.String,java.lang.String) -> a
    int loadShader(int,java.lang.String) -> a
    int createProgram() -> a
    int linkProgram(int) -> c
    java.lang.String getLog() -> b
    boolean isCompiled() -> d
    int fetchAttributeLocation(java.lang.String) -> c
    int fetchUniformLocation(java.lang.String) -> d
    int fetchUniformLocation(java.lang.String,boolean) -> a
    void setUniformi(java.lang.String,int) -> a
    void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4) -> a
    void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4,boolean) -> a
    void setUniformMatrix(int,com.badlogic.gdx.math.Matrix4,boolean) -> a
    void setVertexAttribute(int,int,int,boolean,int,java.nio.Buffer) -> a
    void setVertexAttribute(int,int,int,boolean,int,int) -> a
    void begin() -> e
    void end() -> f
    void dispose() -> c
    void disableVertexAttribute(java.lang.String) -> a
    void disableVertexAttribute(int) -> a
    void enableVertexAttribute(int) -> b
    void checkManaged() -> h
    void addManagedShader(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void invalidateAllShaderPrograms(com.badlogic.gdx.Application) -> a
    void clearAllShaderPrograms(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> g
    void fetchUniforms() -> i
    void fetchAttributes() -> j
    int getAttributeLocation(java.lang.String) -> b
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.glutils.ShapeRenderer -> com.badlogic.gdx.graphics.glutils.s:
    com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer renderer -> a
    boolean matrixDirty -> b
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> c
    com.badlogic.gdx.math.Matrix4 transformMatrix -> d
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> e
    com.badlogic.gdx.math.Vector2 tmp -> f
    com.badlogic.gdx.graphics.Color color -> g
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType shapeType -> h
    boolean autoShapeType -> i
    float defaultRectLineWidth -> j
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,com.badlogic.gdx.graphics.glutils.ShaderProgram) -> <init>
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void begin(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType) -> a
    void rect(float,float,float,float) -> a
    void rectLine(float,float,float,float,float) -> b
    void arc(float,float,float,float,float) -> c
    void arc(float,float,float,float,float,int) -> a
    void circle(float,float,float) -> a
    void circle(float,float,float,int) -> a
    void check(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType,com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType,int) -> a
    void end() -> a
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType -> com.badlogic.gdx.graphics.glutils.t:
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Point -> a
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Line -> b
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Filled -> c
    int glType -> d
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType[] $VALUES -> e
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType[] values() -> values
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getGlType() -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.glutils.VertexArray -> com.badlogic.gdx.graphics.glutils.u:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    boolean isBound -> d
    void <init>(int,com.badlogic.gdx.graphics.VertexAttribute[]) -> <init>
    void <init>(int,com.badlogic.gdx.graphics.VertexAttributes) -> <init>
    void dispose() -> c
    int getNumVertices() -> a
    void setVertices(float[],int,int) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> b
    void invalidate() -> d
com.badlogic.gdx.graphics.glutils.VertexBufferObject -> com.badlogic.gdx.graphics.glutils.v:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> c
    java.nio.FloatBuffer buffer -> d
    java.nio.ByteBuffer byteBuffer -> e
    boolean ownsBuffer -> f
    int bufferHandle -> g
    int usage -> h
    boolean isDirty -> a
    boolean isBound -> b
    void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[]) -> <init>
    void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttributes) -> <init>
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> b
    int getNumVertices() -> a
    void setBuffer(java.nio.Buffer,boolean,com.badlogic.gdx.graphics.VertexAttributes) -> a
    void bufferChanged() -> e
    void setVertices(float[],int,int) -> a
    void setUsage(int) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidate() -> d
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData -> com.badlogic.gdx.graphics.glutils.w:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    int bufferHandle -> d
    boolean isDirect -> e
    boolean isStatic -> f
    int usage -> g
    boolean isDirty -> h
    boolean isBound -> i
    void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[]) -> <init>
    int createBufferObject() -> e
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> b
    int getNumVertices() -> a
    void bufferChanged() -> f
    void setVertices(float[],int,int) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidate() -> d
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO -> com.badlogic.gdx.graphics.glutils.x:
    java.nio.IntBuffer tmpHandle -> a
    com.badlogic.gdx.graphics.VertexAttributes attributes -> b
    java.nio.FloatBuffer buffer -> c
    java.nio.ByteBuffer byteBuffer -> d
    int bufferHandle -> e
    boolean isStatic -> f
    int usage -> g
    boolean isDirty -> h
    boolean isBound -> i
    int vaoHandle -> j
    com.badlogic.gdx.utils.IntArray cachedLocations -> k
    void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[]) -> <init>
    void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttributes) -> <init>
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> b
    int getNumVertices() -> a
    void bufferChanged() -> e
    void setVertices(float[],int,int) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void bindAttributes(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> c
    void unbindAttributes(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void bindData(com.badlogic.gdx.graphics.GL20) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidate() -> d
    void dispose() -> c
    void createVAO() -> f
    void deleteVAO() -> g
    void <clinit>() -> <clinit>
com.badlogic.gdx.graphics.glutils.VertexData -> com.badlogic.gdx.graphics.glutils.y:
    int getNumVertices() -> a
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> b
    void setVertices(float[],int,int) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidate() -> d
    void dispose() -> c
com.badlogic.gdx.math.Frustum -> com.badlogic.gdx.math.a:
    com.badlogic.gdx.math.Vector3[] clipSpacePlanePoints -> a
    float[] clipSpacePlanePointsArray -> b
    com.badlogic.gdx.math.Vector3 tmpV -> f
    com.badlogic.gdx.math.Plane[] planes -> c
    com.badlogic.gdx.math.Vector3[] planePoints -> d
    float[] planePointsArray -> e
    void <init>() -> <init>
    void update(com.badlogic.gdx.math.Matrix4) -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.MathUtils -> com.badlogic.gdx.math.b:
    java.util.Random random -> a
    float sin(float) -> a
    float cos(float) -> b
    int random(int) -> a
    int nextPowerOfTwo(int) -> b
    boolean isPowerOfTwo(int) -> c
    int round(float) -> c
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.MathUtils$Sin -> com.badlogic.gdx.math.c:
    float[] table -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.Matrix4 -> com.badlogic.gdx.math.Matrix4:
    float[] tmp -> l
    float[] val -> a
    com.badlogic.gdx.math.Quaternion quat -> b
    com.badlogic.gdx.math.Quaternion quat2 -> c
    com.badlogic.gdx.math.Vector3 l_vez -> d
    com.badlogic.gdx.math.Vector3 l_vex -> e
    com.badlogic.gdx.math.Vector3 l_vey -> f
    com.badlogic.gdx.math.Vector3 tmpVec -> g
    com.badlogic.gdx.math.Matrix4 tmpMat -> h
    com.badlogic.gdx.math.Vector3 right -> i
    com.badlogic.gdx.math.Vector3 tmpForward -> j
    com.badlogic.gdx.math.Vector3 tmpUp -> k
    void <init>() -> <init>
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix4) -> a
    com.badlogic.gdx.math.Matrix4 set(float[]) -> a
    com.badlogic.gdx.math.Matrix4 mul(com.badlogic.gdx.math.Matrix4) -> b
    com.badlogic.gdx.math.Matrix4 idt() -> a
    com.badlogic.gdx.math.Matrix4 setToOrtho2D(float,float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToOrtho(float,float,float,float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToTranslation(float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    java.lang.String toString() -> toString
    void mul(float[],float[]) -> mul
    void prj(float[],float[],int,int,int) -> prj
    boolean inv(float[]) -> inv
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.Plane -> com.badlogic.gdx.math.d:
    com.badlogic.gdx.math.Vector3 normal -> a
    float d -> b
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.math.Vector3,float) -> <init>
    void set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.math.Quaternion -> com.badlogic.gdx.math.e:
    com.badlogic.gdx.math.Quaternion tmp1 -> e
    com.badlogic.gdx.math.Quaternion tmp2 -> f
    float x -> a
    float y -> b
    float z -> c
    float w -> d
    void <init>(float,float,float,float) -> <init>
    void <init>() -> <init>
    com.badlogic.gdx.math.Quaternion set(float,float,float,float) -> a
    java.lang.String toString() -> toString
    com.badlogic.gdx.math.Quaternion idt() -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.RandomXS128 -> com.badlogic.gdx.math.f:
    long seed0 -> a
    long seed1 -> b
    void <init>() -> <init>
    long nextLong() -> nextLong
    int next(int) -> next
    int nextInt() -> nextInt
    int nextInt(int) -> nextInt
    long nextLong(long) -> a
    double nextDouble() -> nextDouble
    float nextFloat() -> nextFloat
    boolean nextBoolean() -> nextBoolean
    void nextBytes(byte[]) -> nextBytes
    void setSeed(long) -> setSeed
    void setState(long,long) -> a
    long murmurHash3(long) -> b
com.badlogic.gdx.math.Rectangle -> com.badlogic.gdx.math.g:
    com.badlogic.gdx.math.Rectangle tmp -> a
    com.badlogic.gdx.math.Rectangle tmp2 -> b
    float x -> c
    float y -> d
    float width -> e
    float height -> f
    void <init>() -> <init>
    void <init>(float,float,float,float) -> <init>
    com.badlogic.gdx.math.Rectangle set(float,float,float,float) -> a
    float getWidth() -> a
    float getHeight() -> b
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.Vector2 -> com.badlogic.gdx.math.h:
    com.badlogic.gdx.math.Vector2 X -> a
    com.badlogic.gdx.math.Vector2 Y -> b
    com.badlogic.gdx.math.Vector2 Zero -> c
    float x -> d
    float y -> e
    void <init>() -> <init>
    void <init>(float,float) -> <init>
    float len() -> a
    com.badlogic.gdx.math.Vector2 set(float,float) -> a
    com.badlogic.gdx.math.Vector2 nor() -> b
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.Vector3 -> com.badlogic.gdx.math.i:
    float x -> a
    float y -> b
    float z -> c
    com.badlogic.gdx.math.Vector3 X -> d
    com.badlogic.gdx.math.Vector3 Y -> e
    com.badlogic.gdx.math.Vector3 Z -> f
    com.badlogic.gdx.math.Vector3 Zero -> g
    com.badlogic.gdx.math.Matrix4 tmpMat -> h
    void <init>() -> <init>
    void <init>(float,float,float) -> <init>
    com.badlogic.gdx.math.Vector3 set(float,float,float) -> a
    com.badlogic.gdx.math.Vector3 set(com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Vector3 add(com.badlogic.gdx.math.Vector3) -> b
    com.badlogic.gdx.math.Vector3 add(float,float,float) -> b
    com.badlogic.gdx.math.Vector3 sub(com.badlogic.gdx.math.Vector3) -> c
    com.badlogic.gdx.math.Vector3 sub(float,float,float) -> c
    com.badlogic.gdx.math.Vector3 scl(float) -> a
    float len2() -> a
    com.badlogic.gdx.math.Vector3 nor() -> b
    float dot(com.badlogic.gdx.math.Vector3) -> d
    com.badlogic.gdx.math.Vector3 crs(com.badlogic.gdx.math.Vector3) -> e
    com.badlogic.gdx.math.Vector3 crs(float,float,float) -> d
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
com.badlogic.gdx.math.WindowedMean -> com.badlogic.gdx.math.j:
    float[] values -> a
    int added_values -> b
    int last_value -> c
    float mean -> d
    boolean dirty -> e
    void <init>(int) -> <init>
    void clear() -> a
    void addValue(float) -> a
com.badlogic.gdx.math.collision.Ray -> com.badlogic.gdx.math.a.a:
    com.badlogic.gdx.math.Vector3 origin -> a
    com.badlogic.gdx.math.Vector3 direction -> b
    com.badlogic.gdx.math.Vector3 tmp -> c
    void <init>() -> <init>
    void <init>(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> <init>
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
com.badlogic.gdx.net.NetJavaImpl -> com.badlogic.gdx.d.a:
    com.badlogic.gdx.utils.async.AsyncExecutor asyncExecutor -> c
    com.badlogic.gdx.utils.ObjectMap connections -> a
    com.badlogic.gdx.utils.ObjectMap listeners -> b
    void <init>() -> <init>
com.badlogic.gdx.utils.Array -> com.badlogic.gdx.utils.a:
    java.lang.Object[] items -> a
    int size -> b
    boolean ordered -> c
    com.badlogic.gdx.utils.Array$ArrayIterable iterable -> d
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(boolean,int) -> <init>
    void <init>(boolean,int,java.lang.Class) -> <init>
    void <init>(java.lang.Class) -> <init>
    void <init>(com.badlogic.gdx.utils.Array) -> <init>
    void <init>(java.lang.Object[]) -> <init>
    void <init>(boolean,java.lang.Object[],int,int) -> <init>
    void add(java.lang.Object) -> a
    void addAll(com.badlogic.gdx.utils.Array) -> a
    void addAll(com.badlogic.gdx.utils.Array,int,int) -> a
    void addAll(java.lang.Object[],int,int) -> a
    java.lang.Object get(int) -> a
    boolean removeValue(java.lang.Object,boolean) -> a
    java.lang.Object removeIndex(int) -> b
    void removeRange(int,int) -> a
    java.lang.Object pop() -> a
    java.lang.Object peek() -> b
    java.lang.Object first() -> c
    void clear() -> d
    java.lang.Object[] ensureCapacity(int) -> c
    java.lang.Object[] resize(int) -> d
    java.util.Iterator iterator() -> iterator
    void truncate(int) -> e
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    com.badlogic.gdx.utils.Array with(java.lang.Object[]) -> a
com.badlogic.gdx.utils.Array$ArrayIterable -> com.badlogic.gdx.utils.b:
    com.badlogic.gdx.utils.Array array -> a
    boolean allowRemove -> b
    com.badlogic.gdx.utils.Array$ArrayIterator iterator1 -> c
    com.badlogic.gdx.utils.Array$ArrayIterator iterator2 -> d
    void <init>(com.badlogic.gdx.utils.Array) -> <init>
    void <init>(com.badlogic.gdx.utils.Array,boolean) -> <init>
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.Array$ArrayIterator -> com.badlogic.gdx.utils.c:
    com.badlogic.gdx.utils.Array array -> c
    boolean allowRemove -> d
    int index -> a
    boolean valid -> b
    void <init>(com.badlogic.gdx.utils.Array,boolean) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.BufferUtils -> com.badlogic.gdx.utils.BufferUtils:
    com.badlogic.gdx.utils.Array unsafeBuffers -> a
    int allocatedUnsafe -> b
    void copy(float[],java.nio.Buffer,int,int) -> a
    void copy(byte[],int,java.nio.Buffer,int) -> a
    void copy(java.nio.Buffer,java.nio.Buffer,int) -> a
    int positionInBytes(java.nio.Buffer) -> a
    int bytesToElements(java.nio.Buffer,int) -> a
    int elementsToBytes(java.nio.Buffer,int) -> b
    java.nio.FloatBuffer newFloatBuffer(int) -> a
    java.nio.ByteBuffer newByteBuffer(int) -> b
    java.nio.IntBuffer newIntBuffer(int) -> c
    void disposeUnsafeByteBuffer(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer newUnsafeByteBuffer(int) -> d
    void freeMemory(java.nio.ByteBuffer) -> freeMemory
    java.nio.ByteBuffer newDisposableByteBuffer(int) -> newDisposableByteBuffer
    void copyJni(float[],java.nio.Buffer,int,int) -> copyJni
    void copyJni(byte[],int,java.nio.Buffer,int,int) -> copyJni
    void copyJni(java.nio.Buffer,int,java.nio.Buffer,int,int) -> copyJni
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.Disposable -> com.badlogic.gdx.utils.d:
    void dispose() -> c
com.badlogic.gdx.utils.FloatArray -> com.badlogic.gdx.utils.e:
    float[] items -> a
    int size -> b
    boolean ordered -> c
    void <init>() -> <init>
    void <init>(boolean,int) -> <init>
    void add(float) -> a
    void addAll(com.badlogic.gdx.utils.FloatArray) -> a
    void addAll(com.badlogic.gdx.utils.FloatArray,int,int) -> a
    void addAll(float[],int,int) -> a
    float get(int) -> a
    void set(int,float) -> a
    void removeRange(int,int) -> a
    float peek() -> a
    void clear() -> b
    float[] ensureCapacity(int) -> b
    float[] resize(int) -> c
    void truncate(int) -> d
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.GdxNativesLoader -> com.badlogic.gdx.utils.f:
    boolean disableNativesLoading -> a
    boolean nativesLoaded -> b
    void load() -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.GdxRuntimeException -> com.badlogic.gdx.utils.g:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
com.badlogic.gdx.utils.IntArray -> com.badlogic.gdx.utils.h:
    int[] items -> a
    int size -> b
    boolean ordered -> c
    void <init>() -> <init>
    void <init>(boolean,int) -> <init>
    void add(int) -> a
    int get(int) -> b
    void clear() -> a
    int[] ensureCapacity(int) -> c
    int[] resize(int) -> d
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.Logger -> com.badlogic.gdx.utils.i:
    java.lang.String tag -> a
    int level -> b
    void debug(java.lang.String) -> a
    void info(java.lang.String) -> b
    void error(java.lang.String,java.lang.Throwable) -> a
    int getLevel() -> a
com.badlogic.gdx.utils.LongMap -> com.badlogic.gdx.utils.j:
    int size -> a
    long[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    java.lang.Object zeroValue -> f
    boolean hasZeroValue -> g
    float loadFactor -> h
    int hashShift -> i
    int mask -> j
    int threshold -> k
    int stashCapacity -> l
    int pushIterations -> m
    com.badlogic.gdx.utils.LongMap$Entries entries1 -> n
    com.badlogic.gdx.utils.LongMap$Entries entries2 -> o
    com.badlogic.gdx.utils.LongMap$Values values1 -> p
    com.badlogic.gdx.utils.LongMap$Values values2 -> q
    void <init>() -> <init>
    void <init>(int,float) -> <init>
    java.lang.Object put(long,java.lang.Object) -> a
    void putResize(long,java.lang.Object) -> b
    void push(long,java.lang.Object,int,long,int,long,int,long) -> a
    void putStash(long,java.lang.Object) -> c
    java.lang.Object get(long) -> a
    java.lang.Object getStash(long,java.lang.Object) -> d
    java.lang.Object remove(long) -> b
    java.lang.Object removeStash(long) -> c
    void removeStashIndex(int) -> a
    boolean containsKey(long) -> d
    boolean containsKeyStash(long) -> e
    void resize(int) -> b
    int hash2(long) -> f
    int hash3(long) -> g
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.LongMap$Entries entries() -> a
    com.badlogic.gdx.utils.LongMap$Values values() -> b
com.badlogic.gdx.utils.LongMap$Entries -> com.badlogic.gdx.utils.k:
    com.badlogic.gdx.utils.LongMap$Entry entry -> f
    void <init>(com.badlogic.gdx.utils.LongMap) -> <init>
    com.badlogic.gdx.utils.LongMap$Entry next() -> a
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    void reset() -> b
    java.lang.Object next() -> next
com.badlogic.gdx.utils.LongMap$Entry -> com.badlogic.gdx.utils.l:
    long key -> a
    java.lang.Object value -> b
    void <init>() -> <init>
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.LongMap$MapIterator -> com.badlogic.gdx.utils.m:
    boolean hasNext -> a
    com.badlogic.gdx.utils.LongMap map -> b
    int nextIndex -> c
    int currentIndex -> d
    boolean valid -> e
    void <init>(com.badlogic.gdx.utils.LongMap) -> <init>
    void reset() -> b
    void findNextIndex() -> c
    void remove() -> remove
com.badlogic.gdx.utils.LongMap$Values -> com.badlogic.gdx.utils.n:
    void <init>(com.badlogic.gdx.utils.LongMap) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    void reset() -> b
com.badlogic.gdx.utils.NumberUtils -> com.badlogic.gdx.utils.o:
    int floatToIntBits(float) -> a
    int floatToRawIntBits(float) -> b
    float intToFloatColor(int) -> a
com.badlogic.gdx.utils.ObjectIntMap -> com.badlogic.gdx.utils.p:
    int size -> a
    java.lang.Object[] keyTable -> b
    int[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    float loadFactor -> f
    int hashShift -> g
    int mask -> h
    int threshold -> i
    int stashCapacity -> j
    int pushIterations -> k
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries1 -> l
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries2 -> m
    void <init>() -> <init>
    void <init>(int,float) -> <init>
    void put(java.lang.Object,int) -> a
    void putResize(java.lang.Object,int) -> c
    void push(java.lang.Object,int,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    void putStash(java.lang.Object,int) -> d
    int get(java.lang.Object,int) -> b
    int getStash(java.lang.Object,int) -> e
    void removeStashIndex(int) -> a
    void clear() -> a
    boolean containsKey(java.lang.Object) -> a
    boolean containsKeyStash(java.lang.Object) -> b
    void resize(int) -> b
    int hash2(int) -> c
    int hash3(int) -> d
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    com.badlogic.gdx.utils.ObjectIntMap$Entries iterator() -> b
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries() -> c
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectIntMap$Entries -> com.badlogic.gdx.utils.q:
    com.badlogic.gdx.utils.ObjectIntMap$Entry entry -> f
    void <init>(com.badlogic.gdx.utils.ObjectIntMap) -> <init>
    com.badlogic.gdx.utils.ObjectIntMap$Entry next() -> a
    boolean hasNext() -> hasNext
    com.badlogic.gdx.utils.ObjectIntMap$Entries iterator() -> b
    void remove() -> remove
    void reset() -> c
    java.util.Iterator iterator() -> iterator
    java.lang.Object next() -> next
com.badlogic.gdx.utils.ObjectIntMap$Entry -> com.badlogic.gdx.utils.r:
    java.lang.Object key -> a
    int value -> b
    void <init>() -> <init>
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectIntMap$MapIterator -> com.badlogic.gdx.utils.s:
    boolean hasNext -> a
    com.badlogic.gdx.utils.ObjectIntMap map -> b
    int nextIndex -> c
    int currentIndex -> d
    boolean valid -> e
    void <init>(com.badlogic.gdx.utils.ObjectIntMap) -> <init>
    void reset() -> c
    void findNextIndex() -> d
    void remove() -> remove
com.badlogic.gdx.utils.ObjectMap -> com.badlogic.gdx.utils.t:
    int size -> a
    java.lang.Object[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    float loadFactor -> f
    int hashShift -> g
    int mask -> h
    int threshold -> i
    int stashCapacity -> j
    int pushIterations -> k
    com.badlogic.gdx.utils.ObjectMap$Entries entries1 -> l
    com.badlogic.gdx.utils.ObjectMap$Entries entries2 -> m
    com.badlogic.gdx.utils.ObjectMap$Keys keys1 -> n
    com.badlogic.gdx.utils.ObjectMap$Keys keys2 -> o
    void <init>() -> <init>
    void <init>(int,float) -> <init>
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object put_internal(java.lang.Object,java.lang.Object) -> b
    void putResize(java.lang.Object,java.lang.Object) -> c
    void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    void putStash(java.lang.Object,java.lang.Object) -> d
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object getStash(java.lang.Object) -> e
    java.lang.Object remove(java.lang.Object) -> b
    java.lang.Object removeStash(java.lang.Object) -> c
    void removeStashIndex(int) -> a
    void clear() -> a
    boolean containsKey(java.lang.Object) -> d
    boolean containsKeyStash(java.lang.Object) -> f
    void resize(int) -> b
    int hash2(int) -> c
    int hash3(int) -> d
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String,boolean) -> a
    com.badlogic.gdx.utils.ObjectMap$Entries iterator() -> b
    com.badlogic.gdx.utils.ObjectMap$Entries entries() -> c
    com.badlogic.gdx.utils.ObjectMap$Keys keys() -> d
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectMap$Entries -> com.badlogic.gdx.utils.u:
    com.badlogic.gdx.utils.ObjectMap$Entry entry -> a
    void <init>(com.badlogic.gdx.utils.ObjectMap) -> <init>
    com.badlogic.gdx.utils.ObjectMap$Entry next() -> a
    boolean hasNext() -> hasNext
    com.badlogic.gdx.utils.ObjectMap$Entries iterator() -> b
    void remove() -> remove
    void reset() -> c
    java.util.Iterator iterator() -> iterator
    java.lang.Object next() -> next
com.badlogic.gdx.utils.ObjectMap$Entry -> com.badlogic.gdx.utils.v:
    java.lang.Object key -> a
    java.lang.Object value -> b
    void <init>() -> <init>
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectMap$Keys -> com.badlogic.gdx.utils.w:
    void <init>(com.badlogic.gdx.utils.ObjectMap) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    com.badlogic.gdx.utils.ObjectMap$Keys iterator() -> a
    com.badlogic.gdx.utils.Array toArray() -> b
    com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array) -> a
    void remove() -> remove
    void reset() -> c
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectMap$MapIterator -> com.badlogic.gdx.utils.x:
    boolean hasNext -> b
    com.badlogic.gdx.utils.ObjectMap map -> c
    int nextIndex -> d
    int currentIndex -> e
    boolean valid -> f
    void <init>(com.badlogic.gdx.utils.ObjectMap) -> <init>
    void reset() -> c
    void findNextIndex() -> d
    void remove() -> remove
com.badlogic.gdx.utils.ObjectSet -> com.badlogic.gdx.utils.y:
    int size -> a
    java.lang.Object[] keyTable -> b
    int capacity -> c
    int stashSize -> d
    float loadFactor -> e
    int hashShift -> f
    int mask -> g
    int threshold -> h
    int stashCapacity -> i
    int pushIterations -> j
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator1 -> k
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator2 -> l
    void <init>() -> <init>
    void <init>(int,float) -> <init>
    boolean add(java.lang.Object) -> a
    void addResize(java.lang.Object) -> c
    void push(java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    void addStash(java.lang.Object) -> d
    void removeStashIndex(int) -> a
    void clear() -> a
    boolean contains(java.lang.Object) -> b
    boolean containsKeyStash(java.lang.Object) -> e
    void resize(int) -> b
    int hash2(int) -> c
    int hash3(int) -> d
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> a
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator() -> b
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator -> com.badlogic.gdx.utils.z:
    boolean hasNext -> a
    com.badlogic.gdx.utils.ObjectSet set -> b
    int nextIndex -> c
    int currentIndex -> d
    boolean valid -> e
    void <init>(com.badlogic.gdx.utils.ObjectSet) -> <init>
    void reset() -> a
    void findNextIndex() -> b
    void remove() -> remove
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator() -> c
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.OrderedMap -> com.badlogic.gdx.utils.aa:
    com.badlogic.gdx.utils.Array keys -> f
    com.badlogic.gdx.utils.ObjectMap$Entries entries1 -> g
    com.badlogic.gdx.utils.ObjectMap$Entries entries2 -> h
    com.badlogic.gdx.utils.ObjectMap$Keys keys1 -> i
    com.badlogic.gdx.utils.ObjectMap$Keys keys2 -> j
    void <init>() -> <init>
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object remove(java.lang.Object) -> b
    void clear() -> a
    com.badlogic.gdx.utils.ObjectMap$Entries iterator() -> b
    com.badlogic.gdx.utils.ObjectMap$Entries entries() -> c
    com.badlogic.gdx.utils.ObjectMap$Keys keys() -> d
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.OrderedMap$OrderedMapEntries -> com.badlogic.gdx.utils.ab:
    com.badlogic.gdx.utils.Array keys -> g
    void <init>(com.badlogic.gdx.utils.OrderedMap) -> <init>
    void reset() -> c
    com.badlogic.gdx.utils.ObjectMap$Entry next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
com.badlogic.gdx.utils.OrderedMap$OrderedMapKeys -> com.badlogic.gdx.utils.ac:
    com.badlogic.gdx.utils.Array keys -> a
    void <init>(com.badlogic.gdx.utils.OrderedMap) -> <init>
    void reset() -> c
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.Pool -> com.badlogic.gdx.utils.ad:
    int max -> b
    int peak -> c
    com.badlogic.gdx.utils.Array freeObjects -> a
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    java.lang.Object newObject() -> b
    java.lang.Object obtain() -> c
    void free(java.lang.Object) -> a
    void reset(java.lang.Object) -> b
    void freeAll(com.badlogic.gdx.utils.Array) -> a
com.badlogic.gdx.utils.Pool$Poolable -> com.badlogic.gdx.utils.ae:
    void reset() -> a
com.badlogic.gdx.utils.Pools -> com.badlogic.gdx.utils.af:
    com.badlogic.gdx.utils.ObjectMap typePools -> a
    com.badlogic.gdx.utils.Pool get(java.lang.Class,int) -> a
    com.badlogic.gdx.utils.Pool get(java.lang.Class) -> a
    void freeAll(com.badlogic.gdx.utils.Array,boolean) -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.ReflectionPool -> com.badlogic.gdx.utils.ag:
    com.badlogic.gdx.utils.reflect.Constructor constructor -> a
    void <init>(java.lang.Class,int,int) -> <init>
    com.badlogic.gdx.utils.reflect.Constructor findConstructor(java.lang.Class) -> a
    java.lang.Object newObject() -> b
com.badlogic.gdx.utils.SharedLibraryLoader -> com.badlogic.gdx.utils.ah:
    boolean isWindows -> a
    boolean isLinux -> b
    boolean isMac -> c
    boolean isIos -> d
    boolean isAndroid -> e
    boolean isARM -> f
    boolean is64Bit -> g
    java.lang.String abi -> h
    java.util.HashSet loadedLibraries -> i
    java.lang.String nativesJar -> j
    void <init>() -> <init>
    java.lang.String crc(java.io.InputStream) -> a
    java.lang.String mapLibraryName(java.lang.String) -> a
    void load(java.lang.String) -> b
    java.io.InputStream readFile(java.lang.String) -> e
    java.io.File extractFile(java.lang.String,java.lang.String,java.io.File) -> a
    void loadFile(java.lang.String) -> f
    java.lang.Throwable loadFile(java.lang.String,java.lang.String,java.io.File) -> b
    void setLoaded(java.lang.String) -> c
    boolean isLoaded(java.lang.String) -> d
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.SnapshotArray -> com.badlogic.gdx.utils.ai:
    java.lang.Object[] snapshot -> d
    java.lang.Object[] recycled -> e
    int snapshots -> f
    void <init>() -> <init>
    void <init>(java.lang.Class) -> <init>
    java.lang.Object[] begin() -> e
    void end() -> f
    void modified() -> g
    boolean removeValue(java.lang.Object,boolean) -> a
    java.lang.Object removeIndex(int) -> b
    void removeRange(int,int) -> a
    java.lang.Object pop() -> a
    void clear() -> d
    void truncate(int) -> e
com.badlogic.gdx.utils.StreamUtils -> com.badlogic.gdx.utils.aj:
    byte[] EMPTY_BYTES -> a
    void copyStream(java.io.InputStream,java.io.OutputStream) -> a
    void copyStream(java.io.InputStream,java.io.OutputStream,byte[]) -> a
    void copyStream(java.io.InputStream,java.nio.ByteBuffer) -> a
    int copyStream(java.io.InputStream,java.nio.ByteBuffer,byte[]) -> a
    byte[] copyStreamToByteArray(java.io.InputStream,int) -> a
    void closeQuietly(java.io.Closeable) -> a
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream -> com.badlogic.gdx.utils.ak:
    void <init>(int) -> <init>
    byte[] toByteArray() -> toByteArray
com.badlogic.gdx.utils.StringBuilder -> com.badlogic.gdx.utils.al:
    char[] chars -> a
    int length -> b
    char[] digits -> c
    int numChars(int,int) -> a
    int numChars(long,int) -> a
    void <init>() -> <init>
    void <init>(int) -> <init>
    void enlargeBuffer(int) -> b
    void appendNull() -> a
    void append0(char[],int,int) -> a
    void append0(char) -> a
    void append0(java.lang.String) -> a
    void append0(java.lang.CharSequence,int,int) -> a
    char charAt(int) -> charAt
    int length() -> length
    java.lang.String substring(int,int) -> b
    java.lang.String toString() -> toString
    java.lang.CharSequence subSequence(int,int) -> subSequence
    com.badlogic.gdx.utils.StringBuilder append(char) -> b
    com.badlogic.gdx.utils.StringBuilder append(int) -> a
    com.badlogic.gdx.utils.StringBuilder append(int,int) -> c
    com.badlogic.gdx.utils.StringBuilder append(int,int,char) -> a
    com.badlogic.gdx.utils.StringBuilder append(long) -> a
    com.badlogic.gdx.utils.StringBuilder append(long,int) -> b
    com.badlogic.gdx.utils.StringBuilder append(long,int,char) -> a
    com.badlogic.gdx.utils.StringBuilder append(float) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.Object) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.String) -> b
    com.badlogic.gdx.utils.StringBuilder append(java.lang.CharSequence) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.CharSequence,int,int) -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Appendable append(char) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
    void <clinit>() -> <clinit>
com.badlogic.gdx.utils.TimeUtils -> com.badlogic.gdx.utils.am:
    long nanoTime() -> a
com.badlogic.gdx.utils.async.AsyncExecutor -> com.badlogic.gdx.utils.a.a:
    java.util.concurrent.ExecutorService executor -> a
    void <init>(int) -> <init>
    com.badlogic.gdx.utils.async.AsyncResult submit(com.badlogic.gdx.utils.async.AsyncTask) -> a
    void dispose() -> c
com.badlogic.gdx.utils.async.AsyncExecutor$1 -> com.badlogic.gdx.utils.a.b:
    com.badlogic.gdx.utils.async.AsyncExecutor this$0 -> a
    void <init>(com.badlogic.gdx.utils.async.AsyncExecutor) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.badlogic.gdx.utils.async.AsyncExecutor$2 -> com.badlogic.gdx.utils.a.c:
    com.badlogic.gdx.utils.async.AsyncTask val$task -> a
    com.badlogic.gdx.utils.async.AsyncExecutor this$0 -> b
    void <init>(com.badlogic.gdx.utils.async.AsyncExecutor,com.badlogic.gdx.utils.async.AsyncTask) -> <init>
    java.lang.Object call() -> call
com.badlogic.gdx.utils.async.AsyncResult -> com.badlogic.gdx.utils.a.d:
    java.util.concurrent.Future future -> a
    void <init>(java.util.concurrent.Future) -> <init>
    boolean isDone() -> a
    java.lang.Object get() -> b
com.badlogic.gdx.utils.async.AsyncTask -> com.badlogic.gdx.utils.a.e:
    java.lang.Object call() -> d
com.badlogic.gdx.utils.async.ThreadUtils -> com.badlogic.gdx.utils.a.f:
    void yield() -> a
com.badlogic.gdx.utils.reflect.ArrayReflection -> com.badlogic.gdx.utils.b.a:
    java.lang.Object newInstance(java.lang.Class,int) -> a
com.badlogic.gdx.utils.reflect.ClassReflection -> com.badlogic.gdx.utils.b.b:
    java.lang.String getSimpleName(java.lang.Class) -> a
    com.badlogic.gdx.utils.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> a
    com.badlogic.gdx.utils.reflect.Constructor getDeclaredConstructor(java.lang.Class,java.lang.Class[]) -> b
com.badlogic.gdx.utils.reflect.Constructor -> com.badlogic.gdx.utils.b.c:
    java.lang.reflect.Constructor constructor -> a
    void <init>(java.lang.reflect.Constructor) -> <init>
    java.lang.Class getDeclaringClass() -> a
    void setAccessible(boolean) -> a
    java.lang.Object newInstance(java.lang.Object[]) -> a
com.badlogic.gdx.utils.reflect.ReflectionException -> com.badlogic.gdx.utils.b.d:
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
